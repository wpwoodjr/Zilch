#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "session.cmn"
  include "memory.cmn")

  function q_sr_get_search_string(pr)
  header
  byte pr(ARB)

  st = st_allocate(MAX_PROMPT)
  q_sr_get_search_string = q_pr_read_prompt(pr,st,len)
  if (q_sr_get_search_string)
    if (len == 0) {
      if (se_search_length == 0) {
	call ms_error("No previous search string!")
	q_sr_get_search_string = false
	}
      }
    else {					# new search string
      call movc(st_buffer(st),st_buffer(se_search_string),len)
      se_search_length = len
      }
  call st_deallocate(st)
  if (q_sr_get_search_string)
    call sr_compile(st_buffer(se_search_string),st_buffer(se_search_mask),
			  se_search_length)
  return
  end

  subroutine sr_compile(s,m,len)
  header
  byte s(ARB), m(ARB)

  for (i = 1; i <= len; i = i+1) {
    if (s(i) >= 'A' & s(i) <= 'Z')
      s(i) = s(i) + 8%40			# convert to lower case
    if (s(i) >= 'a' & s(i) <= 'z')
      m(i) = 8%40				# mask converts text to lower
    else
      m(i) = 0
    }
  return
  end

  function q_search_forward(count)
  header

  q_search_forward = q_sr_get_search_string("Search for: ")
  if (q_search_forward)
    for ( ; count > 0; count = count - 1) {
      q_search_forward = q_tx_search_forward(se_current_buffer,
		  wi_dot(se_current_window), bu_size(se_current_buffer),
		  st_buffer(se_search_string),
		  st_buffer(se_search_mask),se_search_length,
		  wi_dot(se_current_window))
      if (! q_search_forward) {
	call ms_error("Can't find it!")
	break
	}
      else
	wi_dot(se_current_window) = wi_dot(se_current_window)+se_search_length
      }
  return
  end

  function q_search_reverse(count)
  header

  q_search_reverse = q_sr_get_search_string("Reverse search for: ")
  if (q_search_reverse)
    for ( ; count > 0; count = count - 1) {
      q_search_reverse = q_tx_search_reverse(se_current_buffer,1,
		  wi_dot(se_current_window)-2,
		  st_buffer(se_search_string),
		  st_buffer(se_search_mask),se_search_length,
		  wi_dot(se_current_window))
      if (! q_search_reverse) {
	call ms_error("Can't find it!")
	break
	}
      else
	wi_dot(se_current_window) = wi_dot(se_current_window)+se_search_length
      }
  return
  end

  subroutine sr_replace(buf,len)
  header
  logical upfirs, upall
  byte buf(ARB),ho_cupper

  upfirs = false
  upall = false
  bu = se_current_buffer
  beg = wi_dot(se_current_window) - se_search_length
  if (se_search_length > 0)
    if (q_ho_is_upper(tx_text(tx_address(bu,beg)))) {
      upfirs = true
      if (se_search_length > 1)
	if (q_ho_is_upper(tx_text(tx_address(bu,beg+1))))
	  upall = true
      }
  call delete_region(wi_dot(se_current_window),beg)
  for (i = 1; i <= len; i = i+1)
    if (upall | (i == 1 & upfirs))
      call insert_character(ho_cupper(buf(i)))
    else
      call insert_character(buf(i))
  return
  end

  function q_sr_buffer_search_forward(bu,str,len,from,to,loc)
  header
  byte str(ARB)

  call sr_compile(str,st_buffer(se_search_mask),len)
  q_sr_buffer_search_forward = q_tx_search_forward(bu,from,to,str,
  				st_buffer(se_search_mask),len,loc)
  return
  end

  function q_sr_buffer_search_reverse(bu,str,len,from,to,loc)
  header
  byte str(ARB)

  call sr_compile(str,st_buffer(se_search_mask),len)
  q_sr_buffer_search_reverse = q_tx_search_reverse(bu,from,to,str,
  				st_buffer(se_search_mask),len,loc)
  return
  end
