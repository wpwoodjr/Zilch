
a	read
b	write
c	case 0+	of00	end (* case *);0-
d	downto 
e	else0+
f	for 0+	do
g	procedure 00	extern;
h	function 00	extern;
i	if 0+	then
j	else if 0+	then
m	module 00	end (** module **).
p	packed
r	repeat0+	until 0-
t	to 
v	with 0+	do
w	while 0+	do
x	program 00	begin (* program *)0+	end (** program **).-0
y	procedure 00	begin (* proc *)0+	end (** proc **);-0
z	function 00	begin (* func *)0+	end (** func **);-0
0	record0+	end (* record *);0-
1	const0+
2	type0+
3	var0+
4: integer;
5: boolean;
6: char;
7	array [00] of 
8: real;
9: set of 
/	div 
{(* 00 *)
@	%include '
= = 
, < 
< <= 
. > 
> >= 
# <> 
  = 
: := 
; := 
