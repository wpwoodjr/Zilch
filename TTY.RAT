# Zilch Screen Editor, Copyright (c) 1982,1983,1984,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q))

  subroutine send_string_to_terminal(buf)
  header
  byte buf(ARB)

  call send_tty(buf,ho_length(buf))
  call ti_flush
  return
  end

  subroutine send_message_to_terminal(buf)
  header
  byte buf(ARB)
  string crlf "@r@l"

_ifndef(VAX)
  call send_tty(crlf,2)
_enddef
  call send_tty(buf,ho_length(buf))
_ifdef(VAX)
  call send_tty(crlf,2)
_enddef
  call ti_flush
  return
  end

  subroutine send_tty(buf, len)
  header
  include "terminal.cmn"
  byte buf(ARB)
  string lf "@l@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0@0"

  for (i = 1; i <= len; i = i + 1)
    if (buf(i) == lf(1))
      call ti_outch(lf, 1 + ti_lffill)
    else
      call ti_outch(buf(i), 1)
  te_pos_x = te_size_x+1		# invalidate cursor position
  return
  end

  byte function get_tty_character
  header
  include "memory.cmn"
  include "session.cmn"
  include "macro.cmn"
  include "pushb.cmn"
  include "terminal.cmn"
  logical was_type_ahead
  save was_type_ahead
  data was_type_ahead /false/

  if (se_error_occurred) {
    se_error_occurred = false
    call bu_clear_text(pu_buffer)		# purge push-back-buffer
    call sc_update(0)				# force screen update
    while (q_ti_in_type_ahead(pu_tty_c))	# purge type-ahead
      ;
    was_type_ahead = false
    call ti_queue_character_read
    call ti_get_character(pu_tty_c)
    get_tty_character = pu_tty_c
    }
  else if (bu_size(pu_buffer) > 0) {
    call pu_nextc(pu_buffer,pu_tty_c)
    if (pu_tty_c >= 0)
      get_tty_character = pu_tty_c
    else
      get_tty_character = - pu_tty_c
    }
  else {
    if (! was_type_ahead)
      goto 10
    if (! q_ti_in_type_ahead(pu_tty_c)) {
      was_type_ahead = false
10    call ti_queue_character_read
      call sc_update(iosb_status)		# now we update the screen!
      if (iosb_status)
	was_type_ahead = true
      call ti_get_character(pu_tty_c)
      }
    get_tty_character = pu_tty_c
    }
  if (ma_defining_macro)
    if (pu_tty_c >= 0)			# pu_tty_c < 0 - pushed back character
      if (ma_next > MACRO_SIZE) {
	call ms_error("Keyboard macro overflow!")
	call ma_delete(1)
	}
      else {
	ma_text(ma_next) = get_tty_character
	ma_next = ma_next+1
	ma_len(1) = ma_len(1)+1
	}
  pu_last_key_struck = get_tty_character
  return
  end

  function q_get_tty_number(n, pr)
  header
  logical neg
  byte pr(1), c, get_tty_character
  string digits "0123456789"

  n = 0
  call ms_message(pr)
  c = get_tty_character()
  if (c == '-') {
    neg = true
    call ms_message(pr)
    call ms_add_to_message("-")
    c = get_tty_character()
    }
  else
    neg = false
  if (ho_index(digits, c) == 0)
    q_get_tty_number = false
  else
    q_get_tty_number = true
  repeat {
    d = ho_index(digits, c)
    if (d == 0)      # non-digit
      break
    n = 10*n + d - 1
    call ms_report_number(pr, n, EOS)
    c = get_tty_character()
    }
  call pu_push_back_character(c)
  if (neg)
    n = - n
  return
  end
