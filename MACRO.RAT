#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "macro.cmn")

  subroutine ma_begin
  header

  if (ma_defining_macro)
    call ms_error("Already remembering... previous characters lost!")
  else
    call ms_message("Remembering...")
  ma_defining_macro = true
  call ma_delete(1)
  ma_start(1) = ma_next
  return
  end

  subroutine ma_end
  header
  include "pushb.cmn"

# if pu_tty_c is < 0 then this macro end command came from a pushed back
# macro, so ignore it.
  if (ma_defining_macro & pu_tty_c >= 0) {
    ma_defining_macro = false
    call ms_message("Keyboard macro defined.")
    }
  return
  end

  subroutine ma_invoke(mnumb)
  header
  integer mnumb

  if (ma_defining_macro & mnumb == 1) {
    call ms_error("You can't call a keyboard macro while defining it!")
    call ma_delete(1)
    }
  else
    call pu_push_back_buf(ma_text(ma_start(mnumb)), ma_len(mnumb))
  return
  end

  subroutine ma_delete(mnumb)
  header
  integer mnumb

  if (ma_len(mnumb) > 0) {
    call movc(ma_text(ma_start(mnumb)+ma_len(mnumb)),
    	      ma_text(ma_start(mnumb)),ma_next-ma_start(mnumb)-ma_len(mnumb))
    ma_next = ma_next-ma_len(mnumb)
    for (i = 1; i <= MAX_MACROS; i = i+1) {
      if (ma_len(i) > 0 & ma_start(i) > ma_start(mnumb))
	ma_start(i) = ma_start(i)-ma_len(mnumb)
      }
    ma_len(mnumb) = 0
    }
  return
  end

  subroutine ma_replace(mnumb)
  header

  if (ma_defining_macro) {
    call ms_error("You can't rename a keyboard macro while defining it!")
    call ma_delete(1)
    }
  else if (mnumb > 1) {
    call ma_delete(mnumb)
    ma_start(mnumb) = ma_start(1)
    ma_len(mnumb) = ma_len(1)
    ma_len(1) = 0
    }
  return
  end

  subroutine ma_save_macros(buf, nc, bsize)
  header
  byte buf(ARB)

  nc = 0
  for (mnumb = 1; mnumb <= MAX_MACROS; mnumb = mnumb+1) {
    if (nc + ma_len(mnumb) + (MAX_MACROS - mnumb + 1) <= bsize) {
      if (ma_len(mnumb) > 0)
	call movc(ma_text(ma_start(mnumb)), buf(nc+1), ma_len(mnumb))
      nc = nc + ma_len(mnumb) + 1
      }
    else			# assume bsize >= MAX_MACROS
      nc = nc + 1
    buf(nc) = -1
    }
  return
  end

  subroutine ma_restore_macros(buf, nc)
  header
  byte buf(ARB)

  i = 1
  ma_next = 1
  for (mnumb = 1; mnumb <= MAX_MACROS; mnumb = mnumb + 1) {
    ma_start(mnumb) = ma_next
    ma_len(mnumb) = 0
    for ( ; i <= nc; i = i + 1)
      if (buf(i) == -1) {
    	i = i + 1
	break
	}
      else if (ma_next <= MACRO_SIZE) {
	ma_text(ma_next) = buf(i)
	ma_next = ma_next + 1
	ma_len(mnumb) = ma_len(mnumb) + 1
	}
      else
	ma_len(mnumb) = 0
    ma_next = ma_start(mnumb) + ma_len(mnumb)
    }
  return
  end

  function q_ma_write_macros(file)
  header
  byte file(ARB)

  if (! q_fi_open_write(WRITE_UNIT, file, 'N', 16%FFFF))
    return(false)
  q_ma_write_macros = true
  for (mnumb = 1; mnumb <= MAX_MACROS; mnumb = mnumb+1)
    if (! put(WRITE_UNIT, ma_text(ma_start(mnumb)), ma_len(mnumb), ier)) {
      q_ma_write_macros = false
      break
      }
  close(unit=WRITE_UNIT, err=10)
  return
10
  return(false)
  end

  function q_ma_read_macros(file)
  header
  byte file(ARB)

  if (ma_defining_macro) {
    call ms_error("You can't read macros while defining a macro!")
    call ma_delete(1)
    return(false)
    }
  if (! q_fi_open_read(READ_UNIT, file, ebk, pro))
    return(false)
  q_ma_read_macros = true
  ma_next = 1
  for (mnumb = 1; mnumb <= MAX_MACROS; mnumb = mnumb+1) {
    ma_start(mnumb) = ma_next
    if (! get(READ_UNIT, ma_text(ma_next), MACRO_SIZE + 1 - ma_next,
    							ma_len(mnumb)))
      ma_len(mnumb) = 0
    else
      ma_next = ma_next + ma_len(mnumb)
    }
  close(unit=READ_UNIT, err=10)
  return(true)
10
  return(false)
  end
