#	Zilch Screen Editor, Copyright (c) 1988 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "session.cmn"
  include "memory.cmn")
define(link,"<<")
define(endlink,">>")
define(prevlink,"<<prev>>")
define(nextlink,"<<next>>")

  function q_hyp_next_link_or_page
  header

  # if at a "next" link
  if (q_sr_buffer_search_forward(se_current_buffer, nextlink, len(nextlink),
		  max(1, wi_dot(se_current_window) - len(link)),
		  min(bu_size(se_current_buffer),
		    wi_dot(se_current_window) - 1 - len(link) + len(nextlink)),
		  srchdot)) {
    if (q_hyp_exit_link())
      if (q_hyp_next())
	if (q_hyp_follow_link(false))
	  return true
    return false
    }
  return q_hyp_next()
  end

  function q_hyp_next
  header

  dot = wi_dot(se_current_window)
  wi_dot(se_current_window) = wi_bow(se_current_window)
  for (i = 1; i <= wi_size(se_current_window); i = i+1)
    call next_line

  # look for link on current page
  if (q_sr_buffer_search_forward(se_current_buffer, link, len(link),
				max(1, dot - len(link) + 1),
				wi_dot(se_current_window) - 1,
				srchdot)) {
    wi_dot(se_current_window) = srchdot + len(link)	# move to next link
    return true
    }
  if (wi_dot(se_current_window) > bu_size(se_current_buffer)) { # no more text
    wi_dot(se_current_window) = dot			# stay put
    return false
    }

  # move to next page, look for link
  wi_set_bow(se_current_window, wi_dot(se_current_window))
  for (i = 1; i <= wi_size(se_current_window); i = i+1)
    call next_line

  if (q_sr_buffer_search_forward(se_current_buffer, link, len(link),
				wi_bow(se_current_window),
				wi_dot(se_current_window) - 1,
				srchdot))
    wi_dot(se_current_window) = srchdot + len(link)	# move to next link
  else
    wi_dot(se_current_window) = wi_bow(se_current_window) # stay at top of page
  return true
  end

  function q_hyp_prev_link_or_page
  header

  # if at a "prev" link
  if (q_sr_buffer_search_forward(se_current_buffer, prevlink, len(prevlink),
		  max(1, wi_dot(se_current_window) - len(link)),
		  min(bu_size(se_current_buffer),
		    wi_dot(se_current_window) - 1 - len(link) + len(prevlink)),
		  srchdot)) {
    if (q_hyp_exit_link())
      if (q_hyp_prev())
	if (q_hyp_follow_link(false))
	  return true
    return false
    }
  return q_hyp_prev()
  end

  function q_hyp_prev
  header

  # look for link on current page
  if (q_sr_buffer_search_reverse(se_current_buffer, link, len(link),
				wi_bow(se_current_window),
				wi_dot(se_current_window) - 2,	# 2 is right
				srchdot)) {
    wi_dot(se_current_window) = srchdot + len(link)	# move to prev link
    return true
    }
  if (wi_bow(se_current_window) == 1)			# no more text
    return false

  # move to prev page, look for link
  wi_dot(se_current_window) = wi_bow(se_current_window)
  for (i = 1; i <= wi_size(se_current_window); i = i+1)
    call previous_line
  dot = wi_bow(se_current_window)
  wi_set_bow(se_current_window, wi_dot(se_current_window))

  if (q_sr_buffer_search_reverse(se_current_buffer, link, len(link),
				wi_bow(se_current_window),
				dot - 1,
				srchdot))
    wi_dot(se_current_window) = srchdot + len(link)	# move to prev link
  # else stay at top of page
  return true
  end

  function q_hyp_parse_link(st, type)
  header
  integer st
  byte type
  byte find_next_character

  stsize = max(2*FILENAMESIZE, MAX_PROMPT)
  st = st_allocate(stsize)
  dot = wi_dot(se_current_window)
  if (! q_sr_buffer_search_forward(se_current_buffer, endlink, len(endlink),
		dot, bu_size(se_current_buffer), wi_dot(se_current_window))) {
    call ms_error("Can't find end of link!")
    return false
    }
  type = find_next_character()			# default to new page
  call previous_character
  tmp = find_next_character()
  call previous_character
  if (find_next_character() == ' ')		# found a flag character
    type = tmp
  if (type != 'c' & type != 'C') {		# not a command link?
    wi_dot(se_current_window) = dot		# just return first word
    call next_word
    }
  lenlink = min(stsize/2, wi_dot(se_current_window) - dot)
  call tx_copy_text_to_string(se_current_buffer, dot, dot + lenlink - 1, st)
  st_buffer(st + lenlink) = EOS
  wi_dot(se_current_window) = dot
  return true
  end

  function q_hyp_follow_link(donextprev)
  header
  logical donextprev

  # if at a "next" link
  if (q_sr_buffer_search_forward(se_current_buffer, nextlink, len(nextlink),
		  max(1, wi_dot(se_current_window) - len(link)),
		  min(bu_size(se_current_buffer),
		    wi_dot(se_current_window) - 1 - len(link) + len(nextlink)),
		  srchdot)) {
    if (donextprev)
      if (q_hyp_exit_link())
	if (q_hyp_next())
	  return q_hyp_follow()
    return false
    }
  # if at a "prev" link
  else if (q_sr_buffer_search_forward(se_current_buffer, prevlink, len(prevlink),
		  max(1, wi_dot(se_current_window) - len(link)),
		  min(bu_size(se_current_buffer),
		    wi_dot(se_current_window) - 1 - len(link) + len(prevlink)),
		  srchdot)) {
    if (donextprev)
      if (q_hyp_exit_link())
	if (q_hyp_prev())
	  return q_hyp_follow()
    return false
    }
  else
    return q_hyp_follow()
  end

  function q_hyp_follow
  header
  byte linktype

  # if not at a link
  if (! q_sr_buffer_search_forward(se_current_buffer, link, len(link),
				max(1, wi_dot(se_current_window) - len(link)),
				wi_dot(se_current_window) - 1,
				srchdot))
    # move to next link
    if (q_sr_buffer_search_forward(se_current_buffer, link, len(link),
				max(1, wi_dot(se_current_window) - len(link)),
				bu_size(se_current_buffer),
				srchdot)) {
      wi_dot(se_current_window) = srchdot + len(link)
      return true
      }
    else
      return false

  q_hyp_follow = q_hyp_parse_link(st, linktype)
  if (q_hyp_follow) {
    switch (linktype) {
      default:					# link to new page
	call hyp_default_file_name(st_buffer(st),
				  st_buffer(bu_file_name(se_current_buffer)))
	call switch_to_page(pa_number(se_current_page) + 1)
	call next_window			# get to first window
	call delete_other_windows
	call multi_visit_file(st_buffer(st),true,true)
	call pa_ready(se_current_page)
10	if (wi_dot(se_current_window) == 1) {
	  for (i = 1; i <= wi_size(se_current_window); i = i+1)
	    call next_line
	  # look for link on current page
	  if (q_sr_buffer_search_forward(se_current_buffer, link, len(link),
				    1, wi_dot(se_current_window) - 1, srchdot))
	    # move to first link
	    wi_dot(se_current_window) = srchdot + len(link)
	  else
	    wi_dot(se_current_window) = 1
	  }
      case 'w','W':				# link to new window
	call hyp_default_file_name(st_buffer(st),
				  st_buffer(bu_file_name(se_current_buffer)))
	call save_location	# first save bow and dot in current window
	if (! q_pop_up_window()) {
	  call ms_error("Can't make a new window!")
	  q_hyp_follow = false
	  }
	else {
	  call multi_visit_file(st_buffer(st),true,true)
	  call pa_ready(se_current_page)
	  call save_location
	  call hyp_arrange_windows
	  goto 10
	  }
#      case 'n','N','p','P':			# replace current file
#	call hyp_default_file_name(st_buffer(st),
#				  st_buffer(bu_file_name(se_current_buffer)))
#	call multi_visit_file(st_buffer(st),true,true)
#	call pa_ready(se_current_page)
      case 'g','G':				# graphics file
	call hyp_default_file_name(st_buffer(st),
				  st_buffer(bu_file_name(se_current_buffer)))
	call hyp_show_pic(st_buffer(st))
      case 'c','C':				# process
	if (st_buffer(st) == '@')
	  call hyp_default_file_name(st_buffer(st + 1),
				    st_buffer(bu_file_name(se_current_buffer)))
	call hyp_run_process(st_buffer(st))
      }
    }
  call st_deallocate(st)
  return
  end

  function q_hyp_exit_link
  header

  if (wi_prev(se_current_window) != NULL) {
    q_hyp_exit_link = q_delete_window()
    call hyp_arrange_windows
    return
    }
  else if (pa_number(se_current_page) <= 0)
    return false
  call pa_previous_page
  return true
  end

  subroutine hyp_arrange_windows
  header

  wi = se_current_window
  repeat {
    if (wi_prev(se_current_window) != NULL) {
      wi_set_bow(se_current_window, 1)
      call wi_fill
      wi_min_size(se_current_window) = wi_size(se_current_window)
      }
    else if (wi_next(se_current_window) != NULL)
      while (q_enlarge_window())
	;
    call goto_save_location
    while (! q_dot_is_visible())
      call scroll_one_line_up
    call previous_window
    } until (se_current_window == wi)

  wi_map_back(se_current_window, wi)
    wi_min_size(wi) = 1
  return
  end

  function hyp_first_link
  header

  call switch_to_page(0)
  call next_window				# get to first window
  return
  end

define(GBSIZE,2048)
  subroutine hyp_show_pic(file)
  header
  include "screen.cmn"
  include "pushb.cmn"
  byte file(ARB), devicetype(10), c
  save devicetype
  string cntrlg "@g",
    forceprompt "@r@0",
    tek4014enter "@$[?38h@35@$@f",
    tek4014exit "@35@$2@$[?38l"	# <esc>2 puts Graphon into vt mode
  data devicetype(1) /EOS/

  st = st_allocate(max(GBSIZE, MAX_PROMPT))
  if (devicetype(1) == EOS) {
    # force this prompt to be answered by user even if in a macro
    if (bu_size(pu_buffer) > 0) {
      call pu_push_character(pu_buffer, forceprompt(1))
      call pu_push_character(pu_buffer, forceprompt(2))
      }
    if (q_pr_read_prompt("Device type (ascii, regis, tek4014, tek4105)? ",st,dlen))
      if (q_ho_equal(st_buffer(st),"ascii"))
	call movc(st_buffer(st), devicetype, dlen + 1)
      else if (q_ho_equal(st_buffer(st),"regis"))
	call movc(st_buffer(st), devicetype, dlen + 1)
      else if (q_ho_equal(st_buffer(st),"tek4014"))
	call movc(st_buffer(st), devicetype, dlen + 1)
      else if (q_ho_equal(st_buffer(st),"tek4105"))
	call movc(st_buffer(st), devicetype, dlen + 1)
      else {
	call ms_message2("Illegal device type: ",st)
	call ms_error(EOS)
	}
    if (devicetype(1) == EOS)
      goto 20
    }

  call redraw
  call te_pos(sc_size, 1)
  if (q_ho_equal(devicetype,"ascii"))
    ;
  else if (q_ho_equal(devicetype,"tek4014"))
    call ti_outch(tek4014enter, ho_length(tek4014enter))
  else if (q_fi_open_read(READ_UNIT, "online_help:[online_help]plotenter.dat", junk, junk)) {
    while (get(READ_UNIT, st_buffer(st), GBSIZE, nc))
      call ti_outch(st_buffer(st), nc)
    close(unit = READ_UNIT)
    }

  fl = ho_length(file)
  file(fl + 1) = '.'
  call ho_scopy(devicetype, 1, file, fl + 2)
  if (! q_fi_open_read(READ_UNIT, file, junk, junk)) {
    call ms_message("Can't open graphics file ")
    call ms_add_to_message(file)
    call ms_error(EOS)
    }
  else {
    se_interrupt_enabled = true		# allow graphics output to be aborted
    while (! se_error_occurred) {
      err = get(READ_UNIT, st_buffer(st), GBSIZE, nc)
      if (nc < 0)
	break
      call ti_outch(st_buffer(st), nc)
      }
    se_interrupt_enabled = false
    if (nc == RECORDTOOLONG) {
      call ms_message("Input record too long in graphics file ")
      call ms_add_to_message(file)
      call ms_error(EOS)
      }
    else {
      call ti_outch(cntrlg, 1)
      call ti_flush
      call ti_queue_character_read
      call ti_get_character(c)
      }

    close(unit = READ_UNIT, err=10)
    if (false) {
10    call ms_message("Error closing file ")
      call ms_add_to_message(file)
      call ms_error(EOS)
      }
    }

  if (q_ho_equal(devicetype,"ascii"))
    ;
  else if (q_ho_equal(devicetype,"tek4014"))
    call ti_outch(tek4014exit, ho_length(tek4014exit))
  else if (q_fi_open_read(READ_UNIT, "online_help:[online_help]plotexit.dat", junk, junk)) {
    while (get(READ_UNIT, st_buffer(st), GBSIZE, nc))
      call ti_outch(st_buffer(st), nc)
    close(unit = READ_UNIT)
    }

20
  call st_deallocate(st)
  return
  end

  subroutine hyp_run_process(proc)
  header
  include "screen.cmn"
  byte proc(ARB)
  descriptor ch_descr

  call ms_message(EOS)
  call sc_update(0)
  call te_finish
  call te_pos(sc_size,1)
  call ti_flush
  call ti_finish

  status = lib$spawn(ch_descr(proc, ho_length(proc)))
  if (! status) {
    call ms_report_number(_
      "Error number ", status, " occurred while trying to spawn a subprocess.")
    call ms_error(EOS)
    }

  call ti_initialize
  call redraw
  return
  end

# Use def to provide default disk and directory for file
  subroutine hyp_default_file_name(file, def)
  header
  byte file(ARB), def(ARB)

  if (file(1) == ':') {				# expand :file to [file]file
    fl = ho_length(file)
    call movc(file(1), file(fl + 1), fl + 1)
    file(1) = '['
    file(fl + 1) = ']'
    }
  if (ho_indexq(file, ':') != 0)
    return
  if (file(ho_bkscnq(file, "]>", 1)) != EOS) {	# copy from def until last :
    copyto = 0
    repeat {					# find last :
      tmp = ho_bkscnq(def, ":", copyto + 1)
      if (def(tmp) == EOS)
	break
      copyto = tmp
      }
    }
  else {					# copy from def until ], > or :
    copyto = 0
    repeat {					# find last ], > or :
      tmp = ho_bkscnq(def, "]>:", copyto + 1)
      if (def(tmp) == EOS)
	break
      copyto = tmp
      }
    }
  if (file(1) == '.') {				# expand .file to .file]file
    fl = ho_length(file)
    call movc(file(1), file(fl + 1), fl + 1)
    file(fl + 1) = ']'
    }
  if (copyto > 0) {
    if (file(1) == '.')
      copyto = copyto - 1
    call movc(file, file(copyto + 1), ho_length(file) + 1)
    call movc(def, file, copyto)
    }
  return
  end

  function q_hyp_next_page
  header

  dot = wi_dot(se_current_window)
  wi_dot(se_current_window) = wi_bow(se_current_window)
  for (i = 1; i <= wi_size(se_current_window); i = i+1)
    call next_line
  if (wi_dot(se_current_window) > bu_size(se_current_buffer)) { # no more text
    wi_dot(se_current_window) = dot			# stay put
    return false
    }
  wi_set_bow(se_current_window, wi_dot(se_current_window))
  return true
  end

  function q_hyp_prev_page
  header

  if (wi_bow(se_current_window) == 1)
    return false
  wi_dot(se_current_window) = wi_bow(se_current_window)
  for (i = 1; i <= wi_size(se_current_window); i = i+1)
    call previous_line
  wi_set_bow(se_current_window, wi_dot(se_current_window))
  return true
  end
