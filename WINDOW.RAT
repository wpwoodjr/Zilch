#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "screen.cmn"
  include "memory.cmn"
  include "session.cmn")

  function q_split_current_window
  header

  if (se_current_window == null) {
    se_current_window = wi_new(sc_size - 2)
    se_windows = se_current_window
    }
  else if (wi_size(se_current_window) < 3)
    return(false)
  else {
    wi = wi_new((wi_size(se_current_window)-1)/2)
    wi_size(se_current_window) = wi_size(se_current_window)/2
    wi_next(wi) = wi_next(se_current_window)
    wi_next(se_current_window) = wi
    wi_prev(wi) = se_current_window
    if (wi_next(wi) != null)
      wi_prev(wi_next(wi)) = wi
    wi_buffer(wi) = se_current_buffer
    wi_dot(wi) = wi_dot(se_current_window)
    wi_bow(wi) = wi_bow(se_current_window)
    wi_mode_line(wi) = wi_mode_line(se_current_window)
    wi_modified(se_current_window) = 1
    se_current_window = wi
    }
  return(true)
  end

  function q_pop_up_window
  header

  while (! q_split_current_window())
    if (! q_enlarge_window())
      return(false)
  return(true)
  end

  function wi_new(size)
  header

  wi_new = me_allocate(wi_sizeof)
  wi_next(wi_new) = null
  wi_prev(wi_new) = null
  wi_buffer(wi_new) = null
  wi_dot(wi_new) = 1
  wi_bow(wi_new) = 1
  wi_size(wi_new) = size
  wi_min_size(wi_new) = 1
  wi_mode_line(wi_new) = null
  wi_modified(wi_new) = 1
  return
  end

  function q_enlarge_window
  header
  include "terminal.cmn"

  wi_map(wi_next(se_current_window),wi)	# look down for a window to shrink
    if (wi_size(wi) > wi_min_size(wi))	# found one...
      wi_map(se_current_window,wi2) {	# mark intervening windows as modified
	wi_modified(wi2) = 1
	if (wi2 == wi)
	  goto 10
	}
  wi_map_back(wi_prev(se_current_window),wi) #look up for a window to shrink
    if (wi_size(wi) > wi_min_size(wi))	   # found one...
      wi_map_back(se_current_window,wi2) { # mark intervening windows modified
	wi_modified(wi2) = 1
	if (wi2 == wi)
	  goto 10
	}
# if screen is not at full length, increase screen size by one...
#	(only if this is the only page present)
  if (sc_size < te_size_y & pa_next(se_pages) == null) {
    call sc_fill_line(sc_size+1,sc_buffer(1,sc_size,sc_new),
    	sc_new_length(sc_size))
    sc_reverse_video(sc_size+1,sc_new) = false
    sc_size = sc_size + 1
    wi_size(se_current_window) = wi_size(se_current_window) + 1
    wi_map(se_current_window,wi)	# mark intervening windows as modified
      wi_modified(wi) = 1
    call redraw
    return(true)
    }
  return(false)
10
  wi_size(se_current_window) = wi_size(se_current_window) + 1
  wi_size(wi) = wi_size(wi) - 1
  return(true)
  end

  function q_shrink_window
  header

  wi = se_current_window
  if (wi_size(wi) <= 1)
    return(false)
  else if (wi_next(wi) != null) {
    wi_size(wi_next(wi)) = wi_size(wi_next(wi)) + 1
    wi_modified(wi_next(wi)) = 1
    }
  else if (wi_prev(wi) != null) {
    wi_size(wi_prev(wi)) = wi_size(wi_prev(wi)) + 1
    wi_modified(wi_prev(wi)) = 1
    }
  else if (pa_next(se_pages) != null)
    return(false)
  else {
    call sc_fill_line(sc_size-1,sc_buffer(1,sc_size,sc_new),
    	sc_new_length(sc_size))
    sc_reverse_video(sc_size-1,sc_new) = false
    sc_size = sc_size-1
    call redraw		# don't want to leave junk on the screen
    }
  wi_size(wi) = wi_size(wi) - 1
  wi_modified(wi) = 1
  return(true)
  end

  subroutine next_window
  header

  se_current_window = wi_next(se_current_window)
  if (se_current_window == null)
    se_current_window = se_windows
  return
  end

  subroutine previous_window
  header

  se_current_window = wi_prev(se_current_window)
  if (se_current_window == null)
    wi_map(se_windows,wi)
      if (wi_next(wi) == null)
	se_current_window = wi
  return
  end

  function q_delete_window
  header

  wi = se_current_window
  if (wi_next(wi) == null & wi_prev(wi) == null)
    return(false)
  bu_dot(wi_buffer(wi)) = wi_dot(wi)
  bu_bow(wi_buffer(wi)) = wi_bow(wi)
  if (wi_prev(wi) == null) {
    se_current_window = wi_next(wi)
    se_windows = wi_next(wi)
    }
  else if (wi_next(wi) == null)
    se_current_window = wi_prev(wi)
  else if (wi_buffer(wi_prev(wi)) != wi_buffer(wi) &
	    wi_buffer(wi_next(wi)) == wi_buffer(wi))
    se_current_window = wi_next(wi)
  else
    se_current_window = wi_prev(wi)
  if (wi_prev(wi) != null)
    wi_next(wi_prev(wi)) = wi_next(wi)
  if (wi_next(wi) != null)
    wi_prev(wi_next(wi)) = wi_prev(wi)
  wi_size(se_current_window) = wi_size(se_current_window) + wi_size(wi) + 1
  wi_modified(se_current_window) = 1
  call me_deallocate(wi)
  return(true)
  end

  subroutine delete_other_windows
  header

  wi = se_current_window
  for (se_current_window = se_windows; se_current_window != null; )
    if (se_current_window == wi)
      se_current_window = wi_next(se_current_window)
    else
      call q_delete_window
  se_current_window = wi
  return
  end

  subroutine beginning_of_window
  header

  wi_dot(se_current_window) = wi_bow(se_current_window)
  return
  end

  subroutine wi_fill
  header

  t = wi_dot(se_current_window)
  wi_dot(se_current_window) = max(wi_dot(se_current_window),
					bu_size(se_current_buffer))
  while (q_dot_is_visible())
    if (! q_shrink_window())
      break
  while (! q_dot_is_visible())
    if (! q_enlarge_window())
      break
  wi_dot(se_current_window) = t
  if (! q_dot_is_visible())
    call q_enlarge_window
  return
  end

_ifdef(DEBUG)

  subroutine wi_display(w)
  header

  wi_map(w,wi)
    write(6,(" Window at: "i7/"   size = "i7/"   buffer = "i7/ _
		"   dot = "i7/"   bow = "i7/)) _
	  wi,wi_size(wi),wi_buffer(wi),wi_dot(wi),wi_bow(wi)
  return
  end

_enddef

  subroutine wi_equalize
  header

  nw = 0
  wi_map(se_windows,wi)
    nw = nw+1
  ss = sc_size - 1
  wi_map (se_windows,wi) {
    wi_size(wi) = ss/nw + min(1,mod(ss,nw)) - 1
    wi_modified(wi) = 1
    ss = ss - (wi_size(wi) + 1)
    nw = nw-1
    }
  return
  end

  function wi_copy(wi)
  header

  wi_copy = wi_new(wi_size(wi))
  call movc(me_mem(wi), me_mem(wi_copy), wi_sizeof*CHARS_PER_INT)
  return
  end

  subroutine wi_status(wi)
  header
  character date*20
  byte num(15)
  string dateb "21-Nov-1986 13:36:05"
  equivalence (date, dateb)

  bu = wi_buffer(wi)
  if (bu_modified(bu) != 1)
    call ms_message('Mod: N  Size: ')
  else
    call ms_message('Mod: Y  Size: ')
  call ho_itoc(bu_size(bu), num, 15)
  call ms_add_to_message(num)
  call ms_add_to_message('  Pos: ')
  call ho_itoc(wi_dot(wi), num, 15)
  call ms_add_to_message(num)
  call ms_add_to_message(' (')
  if (bu_size(bu) == 0)
    call ms_add_to_message('0')
  else {
    call ho_itoc(int(100.0*(wi_dot(wi)-1)/bu_size(bu) + 0.5), num, 15)
    call ms_add_to_message(num)
    }
  call ms_add_to_message('%)  Col: ')
  call ho_itoc(current_column(), num, 15)
  call ms_add_to_message(num)
  call ms_add_to_message('  Page: ')
  call ho_itoc(pa_number(se_current_page), num, 15)
  call ms_add_to_message(num)
  call ms_add_to_message('   ')
  call lib$sys_asctim( , date)
  call ms_add_to_message(dateb)
  return
  end

  subroutine wi_ready(wi)
  header

  wi_dot(wi) = min(wi_dot(wi),bu_size(wi_buffer(wi))+1)
  wi_set_bow(wi,find_bol(wi_buffer(wi),wi_bow(wi)))
  return
  end
