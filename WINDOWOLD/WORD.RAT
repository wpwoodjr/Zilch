#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "session.cmn"
  include "memory.cmn")

# this subroutine relies on the extra NEWLINES hidden at the end of each buffer
  subroutine next_word
  header

  end = bu_size(se_current_buffer) + 1
  call wo_skip_non_word(end,1,se_cross_lines,0)
  class = se_word_definition(
	  tx_text(tx_address(se_current_buffer, wi_dot(se_current_window))), 0)
  call wo_skip_word(end,1,class)
  return
  end

# this subroutine relies on the extra NEWLINES hidden at the end of each buffer
  subroutine previous_word
  header

  if (wi_dot(se_current_window) > 1) {
    call previous_character
    call wo_skip_non_word(0,-1,se_cross_lines,0)
    class = se_word_definition(
	  tx_text(tx_address(se_current_buffer, wi_dot(se_current_window))), 0)
    call wo_skip_word(0,-1,class)
    call next_character
    }
  return
  end

# this subroutine relies on the extra NEWLINES hidden at the end of each buffer
  subroutine wo_skip_non_word(end,inc,cross,class)
  header
  logical cross
  byte c

  bu = se_current_buffer
  for (tx = wi_dot(se_current_window); tx != end; tx = tx+inc) {
    c = tx_text(tx_address(bu,tx))
    if (se_word_definition(c, class) != 0)
      break
    else if (c == NEWLINE & ! cross)
      break
    }
  wi_dot(se_current_window) = tx
  return
  end

# this subroutine relies on the extra NEWLINES hidden at the end of each buffer
  subroutine wo_skip_word(end,inc,class)
  header

  bu = se_current_buffer
  for (tx = wi_dot(se_current_window); tx != end; tx = tx+inc)
    if (se_word_definition(tx_text(tx_address(bu,tx)), class) == 0)
      break
  wi_dot(se_current_window) = tx
  return
  end
