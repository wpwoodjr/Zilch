#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "memory.cmn"
  include "session.cmn")

  subroutine advance_over_white_space
  header
  byte c

  bu = se_current_buffer
  for (tx = wi_dot(se_current_window); tx <= bu_size(bu); tx = tx+1) {
    c = tx_text(tx_address(bu,tx))
    if (c != ' ' & c != TAB)
      break
    }
  wi_dot(se_current_window) = tx
  return
  end

  subroutine delete_white_space
  header
  byte c

  bu = se_current_buffer
  call advance_over_white_space
  for (tx = wi_dot(se_current_window) - 1; tx > 0; tx = tx-1) {
    c = tx_text(tx_address(bu,tx))
    if (c == ' ' | c == TAB)
      call delete_previous_character
    else
      break
    }
  return
  end

  subroutine do_indent(n)
  header

  call mp_beginning_of_line
  if (! q_mp_at_comment()) {
    call set_indent(current_column() + n)
    call delete_white_space
    if (! q_eol())
      call tab_to_column(bu_indent(se_current_buffer))
    }
  call next_line
  return
  end

  function current_indent
  header

  t = wi_dot(se_current_window)
  call mp_beginning_of_line
  current_indent = current_column()
  wi_dot(se_current_window) = t
  return
  end

  function current_column
  header

  t = wi_dot(se_current_window)
  call beginning_of_line
  bu = se_current_buffer
  current_column = 0
  for (tx = wi_dot(se_current_window); tx < t; tx = tx+1)
    switch (tx_text(tx_address(bu,tx))) {
      case TAB:
	current_column = current_column+8-mod(current_column,8)
      default:
	current_column = current_column+1
      }
  current_column = current_column + 1
  wi_dot(se_current_window) = t
  return
  end

  subroutine goto_column(n)
  header

  call beginning_of_line
  bu = se_current_buffer
  curcol = 0
  for (tx = wi_dot(se_current_window); tx <= bu_size(bu) &
		curcol + 1 < n; tx = tx+1)
    switch (tx_text(tx_address(bu,tx))) {
      case TAB:
	curcol = curcol+8-mod(curcol,8)
      case NEWLINE:
	break
      default:
	curcol = curcol+1
      }
  wi_dot(se_current_window) = tx
  return
  end

  subroutine set_indent(n)
  header

  bu_indent(se_current_buffer) = max(mp_minimum_indent(se_current_buffer), n)
  return
  end

  subroutine tab_to_column(n)
  header

  for (i = current_column(); i < n; i = i+1) {
    tabcol = i-1+8-mod(i-1,8)
    if (tabcol < n) {
      i = tabcol
      call insert_character(TAB)
      }
    else
      call insert_character(' ')
    }
  return
  end
