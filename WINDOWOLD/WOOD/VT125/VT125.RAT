define(header,implicit integer (a-p,r-z); implicit logical (q))
define(message_1,call ti_outch($1,ho_length($1)))

  header
  string init "@$Pp s(e) p [200,200]"
  string fin "@$\"

  call ti_initialize
  call te_initialize
  call te_clear
  message_1(init)
  call ti_flush
  call bind
  call interpret
  message_1(fin)
  call te_finish
  call te_pos(24,1)
  call ti_flush
  call ti_finish
  end

define(_set,_repdef(%1,$2))

_set(_count,1)

define(_bind,
  _ifnotdef(f_%1)
    _set(f_%1,_count)
    _set(_count,_incr(_count))
  _enddef
  call bi_bind_to_key(f_%1,%1))

  subroutine bind
  header
  string left "@$[D",
	 right "@$[C",
	 up "@$[A",
	 down "@$[B",
	 reset "@$r",
	 clear "@$c",
	 exit "@32",
	 cr "@r",
	 curve "@$q"

  _bind(left)
  _bind(right)
  _bind(up)
  _bind(down)
  _bind(reset)
  _bind(clear)
  _bind(exit)
  do self = 8%40,8%176
    _bind(self)
  _bind(cr)
  _bind(curve)
  return
  end

  subroutine interpret
  header
  include 'tty.cmn'
  string bell "@$\@7@$Pp",
	 reset "@$\@$Pp",
	 clear "s(e)",
	 crlf "@r@l"
  logical curve

  curve = .false.
  for (cmd = bi_get_command(); ; cmd = bi_get_command()) {
    switch (cmd) {
      case f_left:
	call pos(-8, 0, curve)
      case f_right:
	call pos(8, 0, curve)
      case f_up:
	call pos(0, -8, curve)
      case f_down:
	call pos(0, 8, curve)
      case f_exit:
	if (curve) {
	  curve = .false.
	  call ti_outch('(E)', 3)
	  }
	else
	  return
      case f_reset:
	message_1(reset)
      case f_clear:
	message_1(clear)
      case f_self:
	call ti_outch(last_key_struck,1)
      case f_cr:
	call ti_outch(crlf, 2)
      case f_curve:
#	call ti_outch('C(S)[]', 6)
	call ti_outch('V[]', 3)
	curve = .true.
      default:
	message_1(bell)
      }
    call ti_flush
    }
  end

  subroutine pos(ix, iy, curve)
  byte in(20)
  logical curve

  if (curve)
    if (ix >= 0)
      call ti_outch('[+',2)
    else
      message_1('[',1)
  else
    if (ix >= 0)
      call ti_outch('p[+',3)
    else
      message_1('p[',2)
  call ti_outch(in, ho_itoc(ix, in, 20))
  if (iy >= 0)
    message_1(',+',2)
  else
    message_1(',',1)
  call ti_outch(in, ho_itoc(iy, in, 20))
  call ti_outch(']',1)
  return
  end
