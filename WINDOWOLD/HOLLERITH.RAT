#	Zilch Screen Editor, Copyright (c) 1982 William P. Wood, Jr.

# ho_length - compute length of hollerith string
   integer function ho_length(str)
   byte str(ARB)
   for (ho_length = 0; str(ho_length+1) != EOS; ho_length = ho_length + 1)
      ;
   return
   end

# ho_scopy - copy string at from(i) to to(j)
   subroutine ho_scopy(from, i, to, j)
   byte from(ARB), to(ARB)
   integer i, j, k1, k2
   k2 = j
   for (k1 = i; from(k1) != EOS; k1 = k1 + 1) {
      to(k2) = from(k1)
      k2 = k2 + 1
      }
   to(k2) = EOS
   return
   end

# ho_clower - change letter to lower case
   byte function ho_clower (c)
   byte c
   if (c >= 'A' & C <= 'Z')
      ho_clower = c - 'A' + 'a'
   else
      ho_clower = c
   return
   end

# ho_cupper - change letter to upper case
   byte function ho_cupper (c)
   byte c
   if (c >= 'a' & c <= 'z')
      ho_cupper = c - 'a' + 'A'
   else
      ho_cupper = c
   return
   end

# q_ho_equal - compare str1 to str2; return true if equal, false if not
   logical function q_ho_equal(str1, str2)
   byte str1(ARB), str2(ARB), ho_clower
   integer i
   for (i = 1; ho_clower(str1(i)) == ho_clower(str2(i)); i = i + 1)
      if (str1(i) == EOS) {
         q_ho_equal = true
         return
         }
   q_ho_equal = false
   return
   end

# ho_indexq - find character c in str, ignoring chars within quoted strings
   integer function ho_indexq(str, c)
   byte c, str(ARB)
   integer ho_nuqcp
   for (ho_indexq=ho_nuqcp(str, 1); str(ho_indexq) != EOS; 
    	ho_indexq=ho_nuqcp(str, ho_indexq+1))
      if (str(ho_indexq) == c)
         return
   ho_indexq = 0
   return
   end

# ho_nuqcp - return pos of next char which isn't part of a quoted (") string
  integer function ho_nuqcp(buf, i)
  byte buf(ARB)
  integer i

  if (buf(i) != '"')
    return (i)
  for (ho_nuqcp = i+1; buf(ho_nuqcp) != EOS; ho_nuqcp = ho_nuqcp+1)
    if (buf(ho_nuqcp) == '"') {
      ho_nuqcp = ho_nuqcp+1
      if (buf(ho_nuqcp) != '"')
	return
      }
  return
  end

# ho_itoc - convert integer  int  to char string in  str
define(abs,iabs)
   integer function ho_itoc(int, str, size)
   integer abs, mod
   integer d, i, int, intval, j, k, size
   byte str(ARB)
   string digits "0123456789"

   intval = int
   str(1) = EOS
   i = 1
   repeat {            # generate digits
      i = i + 1
      d = mod(intval, 10)
      str(i) = digits(abs(d)+1)
      intval = (intval-d)/10
      } until (intval == 0 | i >= size)
   if (int < 0 & i < size) {      # then sign
      i = i + 1
      str(i) = '-'
      }
   ho_itoc = i - 1
   for (j = 1; j < i; j = j + 1) {   # then reverse
      k = str(i)
      str(i) = str(j)
      str(j) = k
      i = i - 1
      }
   return
   end

# ho_itocrj - convert integer to character in a right-adjusted field
define(MAXCHARS,14)
   integer function ho_itocrj(int, str, size)
   integer int, size, j
   integer ho_itoc
   byte str(ARB), tbuf(MAXCHARS)
   j = ho_itoc(int, tbuf, MAXCHARS)
   for (i = size-1; j > 0 & i > 0; i = i-1) {
      str(i) = tbuf(j)
      j = j-1
      }
   for ( ; i > 0; i = i-1)
      str(i) = ' '
   str(size) = EOS
   ho_itocrj = size-1
   return
   end

# ho_index - find character  c  in string  str
   integer function ho_index(str, c)
   byte c, str(ARB)
   for (ho_index = 1; str(ho_index) != EOS; ho_index = ho_index + 1)
      if (str(ho_index) == c)
         return
   ho_index = 0
   return
   end

# ho_ctoi - convert string at in(i) to integer, increment i
   integer function ho_ctoi(in, i)
   byte in(ARB)
   integer ho_index
   integer d, i
   logical neg
   string digits "0123456789"

   while (in(i) == ' ' | in(i) == TAB)
      i = i + 1
   if (in(i) == '-') {
     neg = true
     i = i + 1
     }
   else
     neg = false
   for (ho_ctoi = 0; in(i) != EOS; i = i + 1) {
      d = ho_index(digits, in(i))
      if (d == 0)      # non-digit
         break
      ho_ctoi = 10 * ho_ctoi + d - 1
      }
   if (neg)
      ho_ctoi = -ho_ctoi
   return
   end

# ho_bkscnq - return index of first break char in str,
#	      ignore chars inside quotes
  integer function ho_bkscnq(str, brk, i)
  byte str(ARB), brk(ARB)
  integer ho_index, ho_nuqcp, i
  for (ho_bkscnq = ho_nuqcp(str,i); str(ho_bkscnq) != EOS;
		ho_bkscnq = ho_nuqcp(str,ho_bkscnq+1))
    if (ho_index(brk, str(ho_bkscnq)) != 0)
      break
  return
  end

# q_ho_is_upper - return true if c is upper case letter
  logical function q_ho_is_upper(c)
  byte c

  return(c >= 'A' & c <= 'Z')
  end
