# Zilch Screen Editor, Copyright (c) 1982,1983,1984,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "bind.cmn")

  function bi_use_keymap(mode)
  header

  do i = 0, NUM_MODES-1
    if (bi_modes(i) == bi_mode) {
      bi_use_keymap = i
      break
      }
  if (mode < 0 | mode >= NUM_MODES)
    goto 10
  else if (bi_modes(mode) == null) {
10  call ms_report_number("Illegal mode: ",mode,EOS)
    call ms_error(EOS)
    }
  else
    bi_mode = bi_modes(mode)
  return
  end

  function bi_get_command()
  header
%	include 'tables.cmn'
  include "screen.cmn"
  byte c,get_tty_character

  errmsglen = sc_new_length(sc_size)
  bi = bi_mem(ta_lower(get_tty_character()) + bi_mode)
  newerrmsglen = sc_new_length(sc_size)
  for ( ; bi > 0; bi = bi_mem(bi)) {
    sc_new_length(sc_size) = errmsglen
    c = get_tty_character()
    while (bi_char(bi) != ta_lower(c) & bi_char(bi) != - c) {
      bi = bi_next(bi)
      if (bi == 0) {
	sc_new_length(sc_size) = newerrmsglen
	return(0)
	}
      }
    }
  sc_new_length(sc_size) = newerrmsglen
  return(- bi)
  end

  subroutine bi_bind_to_key(fnc, key)
  header
  byte key(ARB), ho_clower

  if (key(1) != EOS) {
    if (key(1) == bi_alternate_escape)
      if (key(2) != EOS)
	if (key(2) >= 0) {
	  bi_alternate_escape_followers(key(2)) = true
	  bi_alternate_escape_followers(ho_clower(key(2))) = true
	  }
	else
	  bi_alternate_escape_followers(- key(2)) = true
    bi = ho_clower(key(1)) + bi_mode
    for (i = 2; bi_mem(bi) > 0 & key(i) != EOS; i = i+1) {
      for (nxtchar = bi_mem(bi); nxtchar > 0; nxtchar = bi_next(nxtchar))
	if (bi_char(nxtchar) == ho_clower(key(i))) {
	  bi = nxtchar
	  next 2
	  }
      break
      }
    if (key(i) == EOS) {			# found it
      if (bi_mem(bi) <= 0)			# don't overwrite longer binds
	bi_mem(bi) = - fnc
      }
    else {
      t = bi_make_bindings(fnc,key(i))
      bi_next(t) = max(0, bi_mem(bi))
      bi_mem(bi) = t
      }
    }
  return
  end

  function bi_make_bindings(fnc,key)
  header
  byte key(ARB)

  bi_make_bindings = bi_new(key(1))
  bi = bi_make_bindings
  for (i = 2; key(i) != EOS; i = i+1) {
    bi_mem(bi) = bi_new(key(i))
    bi = bi_mem(bi)
    }
  bi_mem(bi) = - fnc
  return
  end

  function bi_new(k)
  header
  byte k, ho_clower

  bi_new = bi_allocate(bi_sizeof)
  bi_next(bi_new) = 0
  bi_char(bi_new) = ho_clower(k)
  bi_mem(bi_new) = 0
  return
  end

  function bi_allocate(n)
  header

  if (bi_free + n - 1 > bi_max) {
    bi_allocate = null
    call ms_error("Binding memory overflow!")
    }
  else {
    do i = bi_free, bi_free + n - 1
      bi_mem(i) = null
    bi_allocate = bi_free
    bi_free = bi_free + n
    }
  return
  end

  function q_bi_in_mode(mode)
  header

  if (mode < 0 | mode >= NUM_MODES)
    q_bi_in_mode = false
  else if (bi_mode == bi_modes(mode))
    q_bi_in_mode = true
  else
    q_bi_in_mode = false
  return
  end
