define(ZILCH)

_ifnotdef(ZILCH)
#-h- rofmain.q        133 asc 08-may-80 10:57:35
#-------------------------------------------------------------
##	main driver for roff

	call initr4
	call roff
	call endr4
	end
_enddef
#-h- roffs.q         1240 asc 08-may-80 10:57:36
#-------------------------------------------------------------

#	include symbols
	include roffsym

_ifdef(ZILCH)
#--------------------------------------------------------------
##	roff -- roff program

	subroutine roff
	character inbuf(INSIZE)
        integer int,blen
        integer getlin
	include flist
	include cpage
	include cout
	include cparam
	include czilch

	data flevel/0/

	call rofint
	repeat {
	  blen = getlin(inbuf, int)
	  if (blen == EOF)
	    break
	  if (inbuf(1) == cchar)
	    call comand(inbuf)
	  else
	    call text(inbuf,blen)
	  }
	
 if (lineno > 0 | outp > 0)
	call space(HUGE)
	
 return
 end
_elsedef
#--------------------------------------------------------------
##	roff -- roff program

	subroutine roff
#	subroutine main

	character iarg(FILENAMESIZE)
	character inbuf(INSIZE)
        integer i, int, blen
        integer getarg, open, getlin
#	integer getctp, type

	include flist
	include cpage
	include cout
	include cparam

	data flevel/0/

	call rofint

 for (i=1; getarg(i, iarg, FILENAMESIZE) != EOF; i=i+1)
	    {
            if ((iarg(1) == MINUS | iarg(1) == PLUS) &
                iarg(2) != EOS)
		call rofcmd(iarg)
	    else if (iarg(1) == QMARK & iarg(2) == EOS)
		call error ('usage:  roff [+n] [-n] [-s] [-po] [file].')
	    else
		call fstack(iarg)
	    }

 if (flevel <= 0)
 	{
 	flevel = 1
        ffiles(1,1) = MINUS
 	}
 for (i=1; i<= flevel; i=i+1)
	{
	if (ffiles(1,i) == MINUS)
		int = STDIN
	else
		int = open (ffiles(1,i), READ)
	if (int == ERR)
		call cant(ffiles(1,i))
	repeat {
	  blen = getlin(inbuf, int)
	  if (blen == EOF)
	    break
	  if (inbuf(1) == cchar)
	    call comand(inbuf)
	  else
	    call text(inbuf,blen)
	  }
	if (int != STDIN)
		call close(int)
	}
	
 if (lineno > 0 | outp > 0)
	call space(HUGE)
	
 return
 end
_enddef
#-h- brk.q            322 asc 08-may-80 10:57:37
   #------------------------------------------------------------


 ## brk - end current filled line
    subroutine brk
    include cout

    if (outp > 0)
       call rput(outbuf, outp-1)
    outp = 0
    outw = 0
    outwds = 0
    prep = 0
    return
    end
#-h- center.q         279 asc 08-may-80 10:57:38
   #------------------------------------------------------------
 ## center - center a line by setting tival
    subroutine center(buf)
    character buf(ARB)
#   integer max
    integer width
    include cparam

    tival = max((rmval+tival-width(buf))/2, 0)
    return
    end
_ifnotdef(ZILCH)
#-h- rofcmd.q        1208 asc 08-may-80 10:57:38
   #------------------------------------------------------------
   ## rofcmd - process control command (preceded by MINUS or PLUS sign)
 
   subroutine rofcmd (iarg)
 
   integer create, ctoi, i, val
    character iarg(ARB), argtyp, terml(FILENAMESIZE)
 
   include flist
   include cpage
   include cparam

   #check for pause flag (-S)
   if (iarg(1) == MINUS & (iarg(2) == LETS | iarg(2) == BIGS))
	{		#open channel to user's teletype
_ifdef(TERM_STUFF)
	call termin (terml)
	stopx = create(terml, READ)
	if (stopx == ERR)
		{
		call remark ("Can't open user's terminal.")
		stopx = 0
		}
_enddef
	}
 
  #check for page offset (-POn)
   else if (iarg(1) == MINUS &
            (iarg(2) == LETP | iarg(2) == BIGP) &
            (iarg(3) == LETO | iarg(3) == BIGO))
     {
     i = 4
     val = ctoi (iarg, i)
     argtyp = iarg(4)
     call set (offset, val, argtyp, 0, 0, rmval-1)
     }
 
   #check for beginning page number (+n)
   else if (iarg(1) == PLUS)
      {
      i = 2
      frstpg = ctoi (iarg, i)
      }
 
   #check for last page number (-n)
      else if (iarg(1) == MINUS)
      {
      i = 2
      lstpag = ctoi (iarg, i)
      }
 
 
   #error
   else call remark ('Ignoring invalid argument.' )
 
   return
   end
_enddef
#-h- comand.q        3210 asc 08-may-80 10:57:40
   #------------------------------------------------------------
 ## comand - perform formatting command
 # call to set for underline corrected 12 April 78 - DEH
    subroutine comand(buf)
    character buf(MAXLINE), argtyp
#   integer max
    integer comtyp, getval
    integer ct, spval, val, lvval
    include cpage
    include cparam
    include cout
 
    ct = comtyp(buf)
    if (ct == UNKNOWN)   # ignore unknown commands
       return
    val = getval(buf, argtyp)
    if (ct == FI) {
       call brk
       fill = YES
       }
    else if (ct == NF) {
       call brk
       fill = NO
       }
    else if (ct == BR)
       call brk
    else if (ct == LS)
       call set(lsval, val, argtyp, 1, 1, HUGE)
    else if (ct == CE) {
       call brk
       call set(ceval, val, argtyp, 1, 0, HUGE)
       }
    else if (ct == UL)
       call set(ulval, val, argtyp, 1, 0, HUGE)
    else if (ct == BD) {
       call set(boval, val, argtyp, 0, 1, HUGE)
     }
    else if (ct == HE)
       {
       call gettl(buf, ehead, ehlim)
       call gettl(buf, ohead, ohlim)
       }
    else if (ct == FO)
       {
       call gettl(buf, efoot, eflim)
       call gettl(buf, ofoot, oflim)
       }
    else if (ct == BP) {
       call brk
       if (lineno > 0)
	 call space(HUGE)
       call set(curpag, val, argtyp, curpag+1, -HUGE, HUGE)
       newpag = curpag
       lineno = 0
       }
    else if (ct == SP) {
       call set(spval, val, argtyp, 1, 0, HUGE)
       spval = spval*lsval
       call space(spval)
       }
    else if (ct == IN) {
       call brk
       call set(inval, val, argtyp, 0, 0, rmval-1)
       tival = inval
       }
    else if (ct == RM)
       call set(rmval, val, argtyp, PAGEWIDTH, tival+1, HUGE)
    else if (ct == TI) {
       call brk
       call set(tival, val, argtyp, 0, 0, rmval)
       }
    else if (ct == PL) {
       call set(plval, val, argtyp, PAGELEN,
          m1val+m2val+m3val+m4val+1, HUGE)
       bottom = plval - m3val - m4val
       }
    else if (ct == PO) {
       call brk
       call set (offset, val, argtyp, 0, 0, rmval-1)
       }
    else if (ct == M1)
       call set (m1val, val, argtyp, 3, 0,
            plval-m2val-m3val-m4val-1)
    else if (ct == M2)
       call set (m2val, val, argtyp, 2, 0,
            plval-m1val-m3val-m4val-1)
    else if (ct == M3)
       {
       call set (m3val, val, argtyp, 2, 0,
            plval-m1val-m2val-m4val-1)
       bottom = plval - m3val - m4val
       }
    else if (ct == M4)
       {
       call set (m4val, val, argtyp, 3, 0,
            plval-m1val-m2val-m3val-1)
       bottom = plval - m3val - m4val
       }
    else if (ct == EH)
       call gettl(buf,ehead, ehlim)
    else if (ct == OH)
       call gettl(buf,ohead, ohlim)
    else if (ct == EF)
       call gettl(buf,efoot, eflim)
    else if (ct == OF)
       call gettl(buf,ofoot, oflim)
    else if (ct == CC)
       cchar = argtyp
    else if (ct == NE) {
       if (outp > 0)			# an unflushed line!
	 val = val + 1
       if ((lineno + val*lsval) > bottom) {
          call space(val*lsval)
          lineno = 0
          }
       }
    else if (ct == BS)
       call set(bsval, val, argtyp, 1, 0, HUGE)
    else if (ct == JU)
       rjust = YES
    else if (ct == NJ)
       rjust = NO
    else if (ct == FR) {
       call set(fontlv, val, argtyp, -1, -1, 9)
       if (curfon == fontlv | fontlv == -1)
	 fonprt = YES
       else
	 fonprt = NO
       }
    else if (ct == HL) {
      call set(lvval, val, argtyp, 1, 1, MAXHEADERLEVEL)
      call dohlev(lvval, buf)
      }
    else if (ct == DL) {
      call getchr(buf, levtem)
      }
    return
    end
#-h- comtyp.q        1940 asc 08-may-80 10:57:42
   #------------------------------------------------------------
 ## comtyp - decode command type
    integer function comtyp(buf)
    character buf(MAXLINE), c1, c2, clower

    c1 = clower(buf(2))
    c2 = clower(buf(3))
 
    if (c1 == LETF & c2 == LETI)
       comtyp = FI
    else if (c1 == LETN & c2 == LETF)
       comtyp = NF
    else if (c1 == LETB & c2 == LETR)
       comtyp = BR
    else if (c1 == LETL & c2 == LETS)
       comtyp = LS
    else if (c1 == LETB & c2 == LETP)
       comtyp = BP
    else if (c1 == LETS & c2 == LETP)
       comtyp = SP
    else if (c1 == LETI & c2 == LETN)
       comtyp = IN
    else if (c1 == LETR & c2 == LETM)
       comtyp = RM
    else if (c1 == LETT & c2 == LETI)
       comtyp = TI
    else if (c1 == LETC & c2 == LETE)
       comtyp = CE
    else if (c1 == LETU & c2 == LETL)
       comtyp = UL
    else if (c1 == LETH & c2 == LETE)
       comtyp = HE
    else if (c1 == LETF & c2 == LETO)
       comtyp = FO
    else if (c1 == LETP & c2 == LETL)
       comtyp = PL
    else if (c1 == LETP & c2 == LETO)
        comtyp = PO
    else if (c1 == LETB & c2 == LETD)
        comtyp = BD
    else if (c1 == LETM & c2 == DIG1)
        comtyp = M1
    else if (c1 == LETH & c2 == DIG1)
        comtyp = M1
    else if (c1 == LETM & c2 == DIG2)
        comtyp = M2
    else if (c1 == LETH & c2 == DIG2)
        comtyp = M2
    else if (c1 == LETM & c2 == DIG3)
        comtyp = M3
    else if (c1 == LETF & c2 == DIG1)
        comtyp = M3
    else if (c1 == LETM & c2 == DIG4)
        comtyp = M4
    else if (c1 == LETF & c2 == DIG2)
        comtyp = M4
    else if (c1 == LETE & c2 == LETH)
        comtyp = EH
    else if (c1 == LETO & c2 == LETH)
        comtyp = OH
    else if (c1 == LETE & c2 == LETF)
        comtyp = EF
    else if (c1 == LETO & c2 == LETF)
        comtyp = OF
    else if (c1 == LETC & c2 == LETC)
        comtyp = CC
    else if (c1 == LETN & c2 == LETE)
        comtyp = NE
    else if (c1 == LETB & c2 == LETS)
        comtyp = BS
    else if (c1 == LETJ & c2 == LETU)
        comtyp = JU
    else if (c1 == LETN & c2 == LETJ)
        comtyp = NJ
    else if (c1 == LETF & c2 == LETR)
       comtyp = FR
    else if (c1 == LETH & c2 == LETL)
       comtyp = HL
    else if (c1 == LETD & c2 == LETL)
       comtyp = DL
    else
       comtyp = UNKNOWN
    return
    end
# dohlev - put out a header level
  subroutine dohlev(lev, buf)
  integer lev, i, j, itoc
  character buf(ARB), levchr(MAXCHARS)
  include cout
  include cparam
  include cpage

  call brk
  hlevs(lev) = hlevs(lev) + 1
  for (i = lev + 1; i <= MAXHEADERLEVEL; i = i + 1)
    hlevs(i) = 0
  for ([i = 1; j = 1]; i <= lev & outp < MAXOUT - 2; j = j + 1) {
    switch (levtem(j)) {
      case '#':
	outp = outp + itoc(hlevs(i), outbuf(outp+1), MAXOUT - 1 - outp)
      case 'A':
	outp = outp + 1
	if (hlevs(i) == 0)
	  outbuf(outp) = BLANK
	else
	  outbuf(outp) = hlevs(i) + 'A' - 1
      case 'a':
	outp = outp + 1
	if (hlevs(i) == 0)
	  outbuf(outp) = BLANK
	else
	  outbuf(outp) = hlevs(i) + 'a' - 1
      case '/':
	i = i + 1
      case NEWLINE,EOS:
	outp = outp + itoc(hlevs(i), outbuf(outp+1), MAXOUT - 2 - outp)
	if (i < lev) {
	  outp = outp + 1
	  outbuf(outp) = PERIOD
	  }
	j = j - 1
	i = i + 1
      default:
	outp = outp + 1
	outbuf(outp) = levtem(j)
      }
    }
  call getchr(buf, buf)
  for (i = 1; buf(i) >= '0' & buf(i) <= '9'; i = i + 1) # skip level number
    ;
  for (outp = outp + 1; buf(i) != EOS & buf(i) != NEWLINE & outp <= MAXOUT - 2;
	    					[i = i + 1; outp = outp + 1])
    outbuf(outp) = buf(i)
  call brk
  return
  end
_ifnotdef(ZILCH)
#-h- fstack.q         358 asc 08-may-80 10:57:44
   #------------------------------------------------------------
   ## fstack - generate stack of input files

   subroutine fstack (iarg)

   integer i
   character iarg(FILENAMESIZE)

   include flist

   if (flevel < FLMAX)
     {
     flevel = flevel + 1
     for (i=1; i<=FILENAMESIZE; i=i+1)
         ffiles(i,flevel) = iarg(i)
     }
   return
   end
_enddef
#-h- getchr.q          528 asc 08-may-80 10:57:45
   #------------------------------------------------------------
 ## getchr - copy chars from buf1 to buf2
    subroutine getchr(buf1, buf2)
    character buf1(MAXLINE), buf2(MAXLINE)
    integer i, lim(2)

    i = 1            # skip command name
    while (buf1(i) != BLANK & buf1(i) != TAB & buf1(i) != NEWLINE)
       i = i + 1
    call skipbl(buf1, i)      # find argument
    call scopy(buf1, i, buf2, 1)   # copy chars to buf2
    return
    end
#-h- gettl.q          528 asc 08-may-80 10:57:45
   #------------------------------------------------------------
 ## gettl - copy title from buf to ttl
    subroutine gettl(buf, ttl, lim)
    character buf(MAXLINE), ttl(MAXLINE)
    integer i, lim(2)
    include cparam

    call getchr(buf, ttl)
    lim(1) = inval               # set limits
    lim(2) = rmval
    return
    end
#-h- getval.q         512 asc 08-may-80 10:57:45
   #------------------------------------------------------------
 ## getval - evaluate optional numeric argument
    integer function getval(buf, argtyp)
    character buf(MAXLINE), argtyp
    integer ctoi
    integer i

    i = 1            # skip command name
    while (buf(i) != BLANK & buf(i) != TAB & buf(i) != NEWLINE)
       i = i + 1
    call skipbl(buf, i)      # find argument
    argtyp = buf(i)
    if (argtyp == PLUS | argtyp == MINUS)
       i = i + 1
    getval = ctoi(buf, i)
    return
    end
#-h- rofint.q        1139 asc 08-may-80 10:57:46
   #------------------------------------------------------------
 ## rofint - set parameters to default values
    subroutine rofint
    include cparam
    include cpage
    include cout
 
   #initialize /cparam/ variables
    inval = 0
    rmval = PAGEWIDTH
    tival = 0
    lsval = 1
    fill = YES
    ceval = 0
    ulval = 0
    boval = 0
    cchar = PERIOD       # initial command character
    tjust(1) = LEFT; tjust(2) = CENTER; tjust(3) = RIGHT
    bsval = 0
    rjust = YES
    dir = 0
    subch = ACCENT
    supch = TILDE
    fontch = BACKSLASH
    fontlv = -1
    spacch = SHARP
    levtem(1) = EOS
 
   #initialize /cpage/ variables
    lineno = 0
    curpag = 0
    newpag = 1
    putff = NO
    plval = PAGELEN
    m1val = 3; m2val = 2; m3val = 3; m4val = 3
    bottom = plval - m3val - m4val
    ehead(1) = NEWLINE; ehead(2) = EOS	# initial titles
    ohead(1) = NEWLINE; ohead(2) = EOS
    efoot(1) = NEWLINE; efoot(2) = EOS
    ofoot(1) = NEWLINE; ofoot(2) = EOS
    ehlim(1) = inval;  ehlim(2) = rmval  #initial limits for headers
    ohlim(1) = inval;  ohlim(2) = rmval
    eflim(1) = inval;  eflim(2) = rmval
    oflim(1) = inval;  oflim(2) = rmval
    print = YES
    fonprt = YES
    curfon = 0
    frstpg = -10000
    lstpag = 10000
    stopx = 0
    offset = 0
    do i = 1, MAXHEADERLEVEL
      hlevs(i) = 0
 
   #initialize /cout/ variables
    outp = 0
    outw = 0
    outwds = 0
    prep = 0
 
    return
    end
#-h- leadbl.q         506 asc 08-may-80 10:57:48
   #------------------------------------------------------------
 ## leadbl - delete leading blanks, set tival
    subroutine leadbl(buf,blen)
    character buf(MAXLINE)
#   integer max
    integer blen, i, j
    include cparam

    call brk
    for (i = 1; buf(i) == BLANK; i = i + 1)   # find 1st non-blank
       ;
    blen = blen - i + 1
    if (buf(i) != NEWLINE)
       tival = i - 1 + tival
    for (j = 1; buf(i) != EOS; j = j + 1) {   # move line to left
       buf(j) = buf(i)
       i = i + 1
       }
    buf(j) = EOS
    return
    end
#-h- pfoot.q          399 asc 08-may-80 10:57:48
   #------------------------------------------------------------
 ## pfoot - put out page footer
    subroutine pfoot
    include cpage
    integer even

    if (m3val > 0) {
      if (even(curpag) == YES) {		# check for even/odd
	if (efoot(1) != EOS & efoot(1) != NEWLINE) {
	  call skip(float(m3val - 1 + bottom) - lineno)
	  call puttl(efoot,eflim,curpag)
	  }
	}
      else {
	if (ofoot(1) != EOS & ofoot(1) != NEWLINE) {
	  call skip(float(m3val - 1 + bottom) - lineno)
	  call puttl(ofoot,oflim,curpag)
	  }
	}
      }
    if (print == YES)
      if (lineno < plval)			# don't want FF at top of page!
	putff = YES
      else
	putff = NO
    lineno = plval
    return
    end
#-h- phead.q         1092 asc 08-may-80 10:57:49
   #------------------------------------------------------------
 ## phead - put out page header
    subroutine phead
 
    include cpage
    include rscrat
   integer even, first, tty, getlin, junk
   data first /YES/
 
 
    curpag = newpag
   #see if current page should be printed
   if (curpag >= frstpg & curpag <= lstpag)  print = YES
   else print = NO
 
_ifdef(TERM_STUFF)
   if (print == YES)
       {
       if (first == YES)
           {
           if (stopx != 0 & tty(STDOUT) == YES)
		{
		call putlin('Position paper, then hit CR to continue', 
			STDOUT)
		call putc(NEWLINE)
		}
           first = NO
           if (tty(STDOUT) != YES) call putc(CONTROLL)
           }
       if (stopx != 0 & tty(STDOUT) == YES)
           junk = getlin (tbuf1, stopx)
       }
_enddef
    newpag = newpag + 1
    lineno = 0
    if (print == YES & putff == YES)
      call putc(CONTROLL)
    if (m1val > 0) {
      call skip(float(m1val - 1))
      if(even(curpag) == YES)			# check for even/odd
	call puttl(ehead,ehlim,curpag)
      else
	call puttl(ohead,ohlim,curpag)
      }
    call skip(float(m2val))
    return
    end
#-h- rput.q            716 asc 08-may-80 10:57:50
   #------------------------------------------------------------
 ## rput - put out line with proper spacing and indenting
    subroutine rput(buf, blen)
    character buf(MAXLINE)
#   integer min
    integer blen, i, maxsub, maxsup, level, linfon
    include cpage
    include cparam

    if (lineno == 0 | lineno >= bottom)
       call phead

    maxsub = 0
    if (supch != EOS | subch != EOS) {
      maxsup = 0
      level = 0
      for (i = 1; i <= blen; i = i + 1)
	if (buf(i) == supch) {
	  level = level + 1
	  if (level > maxsup)
	    maxsup = maxsup + 1
	  }
	else if (buf(i) == subch) {
	  level = level - 1
	  if (level < maxsub)
	    maxsub = maxsub - 1
	  }
      if (maxsup - maxsub > 0) {
	if (lineno + 1 + (maxsup - maxsub)/2.0 > bottom) {
	   call pfoot
	   call phead
	   }
	for (i = maxsup; i > maxsub; i = i - 1) {
	  linfon = curfon
	  call puthlp(buf, blen, i, 0.5, linfon)
	  }
	}
      }

    call puthlp(buf, blen, maxsub, 1.0, curfon)
    tival = inval
    if (bottom - lineno >= lsval)
      call skip(float(lsval - 1))
    else
      call pfoot
    return
    end
#-h- puthlp
 ## puthlp - help routine for rput
 #------------------------------------------------------------
  subroutine puthlp(buf, len, outlev, lininc, font)
  character buf(ARB)
  integer len, outlev, i, j, level
  real lininc
  include cpage
  include cparam

  if (print == YES) {
    j = offset + tival
    for (i = 1; i <= j; i = i+1)
      call putc(BLANK)
    level = 0
    for (i = 1; i <= len; i = i + 1)
      if (buf(i) == supch)
	level = level + 1
      else if (buf(i) == subch)
	level = level - 1
      else if (buf(i) == fontch) {
	if (i < len) {
	  i = i + 1
	  font = buf(i) - '0'
	  if (font == fontlv | fontlv == -1)
	    fonprt = YES
	  else
	    fonprt = NO
	  if (fontlv == -1) {
	    call putc(fontch)
	    if (buf(i) == spacch)
	      call putc(BLANK)
	    else
	      call putc(buf(i))
	    }
	  }
	}
# what about TAB, CR? ie should below test test it?
      else if ((fonprt == YES & level == outlev) | buf(i) == BACKSPACE) {
#	if (buf(i) == BACKSPACE) {
#	  nb = 0
#	  while (buf(i) == BACKSPACE) {
#	    nb = nb + 1
#	    i = i + 1
#	    }
#	  }
	if (buf(i) == spacch)
	  call putc(BLANK)
	else
	  call putc(buf(i))
	}
      else
	call putc(BLANK)
    if (lininc == 0.5)
      call putc(supch)
    call putc(NEWLINE)
    }
  lineno = lineno + lininc
  return
  end
#-h- puttl.q         1535 asc 08-may-80 10:57:51
   #------------------------------------------------------------
 ## puttl - put out title line with optional page number
    subroutine puttl(buf, lim, pageno)
    character buf(MAXLINE), chars(MAXCHARS), delim, datbuf(19)
    integer pageno, lim(2), first, mon, day, year
    integer nc, dl, length, itoc, i, j, n, left, right, gfield
    include cpage
    include cparam
    include rscrat
    string yr ", 19"
 
    data first /YES/
 
    if (print == YES & buf(1) != EOS)
        {
	if (first == YES) {
	    first = NO
	    call idate(mon,day,year)
	    switch (mon) {
	      case 1: call scopy('January ', 1, datbuf, 1)
	      case 2: call scopy('February ', 1, datbuf, 1)
	      case 3: call scopy('March ', 1, datbuf, 1)
	      case 4: call scopy('April ', 1, datbuf, 1)
	      case 5: call scopy('May ', 1, datbuf, 1)
	      case 6: call scopy('June ', 1, datbuf, 1)
	      case 7: call scopy('July ', 1, datbuf, 1)
	      case 8: call scopy('August ', 1, datbuf, 1)
	      case 9: call scopy('September ', 1, datbuf, 1)
	      case 10: call scopy('October ', 1, datbuf, 1)
	      case 11: call scopy('November ', 1, datbuf, 1)
	      case 12: call scopy('December ', 1, datbuf, 1)
	      }
	    call itoc(day, datbuf(length(datbuf)+1), 3)
	    call scopy(yr, 1, datbuf, length(datbuf) + 1)
	    call itoc(year, datbuf(length(datbuf)+1), 3)
	    dl = length(datbuf)
	    }
	lineno = lineno + 1		# increment line count
        left = lim(1) + 1
        right = lim(2) + 1
        nc = itoc(pageno, chars, MAXCHARS) # format pageno
                                           # nc = no. of characters
        i = 1
        delim = buf(i)                     # get delimiter
        for (j=1; j<right; j=j+1)   ttl(j) = BLANK #initialize title
        n = 0
        repeat
            {
            n = n + 1         # update title counter
            if (gfield(buf,i,right-left,tbuf1,delim) > 0)
                {
                call sbst (tbuf1,PAGENUM,tbuf2,chars,nc)
		call sbst (tbuf2,DATECHAR,tbuf1,datbuf,dl)
                call justfy(tbuf1,left,right,tjust(n),ttl)
                }
            }
        until (buf(i) == EOS | buf(i) == NEWLINE | n == 3)
        ttl(right) = NEWLINE
        ttl(right+1) = EOS
        for (i=1; i<=offset; i=i+1)
	  call putc(BLANK)			# offset
        for (i=1; ttl(i) != EOS; i=i+1)
          if (ttl(i) == spacch)
	    call putc(BLANK)
	  else
	    call putc(ttl(i))			#title
        }
    return
    end
#-h- putwrd.q        2011 asc 08-may-80 10:57:53
   #------------------------------------------------------------
 ## putwrd - put a word in outbuf; includes margin justification
    subroutine putwrd(wrdbuf, wlen, bs)
    character wrdbuf(INSIZE)
    integer width
    integer wlen, i, llval, nextra, w, wntb
    integer bs
    include cout
    include cparam

    w = width(wrdbuf)
    llval = rmval - tival
    wntb = outw + w
    if (wntb > llval) {
      for (i = wlen; i > 0; i = i - 1)		# see if width can be reduced
	if (wrdbuf(i) != BLANK & wrdbuf(i) != TAB)
	  break
      wntb = wntb - (wlen - i)
      }
    if (outp > 0 & (wntb > llval | outp + wlen > MAXOUT))  { # too big
        nextra = llval - outw
   #  delete trailing blanks and tabs
        while (outbuf(outp) == BLANK | outbuf(outp) == TAB) {
           outp = outp - 1
           nextra = nextra + 1
           }
        if (rjust == YES)
           call spread(outbuf, outp, nextra, outwds)
	outp = outp + 1
        call brk				# flush previous line
        }
    for (i = 1; i <= wlen; [outp = outp + 1; i = i + 1])
      outbuf(outp + 1) = wrdbuf(i)
    outw = outw + w
    outwds = outwds + 1
    return
    end
#-h- set.q            603 asc 08-may-80 10:57:55
   #------------------------------------------------------------
 ## set - set parameter and check range
    subroutine set(param, val, argtyp, defval, minval, maxval)
#   integer max, min
    character argtyp
    integer defval, maxval, minval, param, val

    if (argtyp == NEWLINE)      # defaulted
       param = defval
    else if (argtyp == PLUS)      # relative +
       param = param + val
    else if (argtyp == MINUS)   # relative -
       param = param - val
    else               # absolute
       param = val
    param = min(param, maxval)
    param = max(param, minval)
    return
   end
#-h- skip.q           266 asc 08-may-80 10:57:55
   #------------------------------------------------------------
 ## skip - output  n  blank lines
    subroutine skip(n)
    integer i
    real n
    include cpage
    include cparam

    if (print == YES) {
      for (i = 1; i <= n; i = i + 1)
	call putc(NEWLINE)
      if (i - n < 1.0)
	call putc(subch)
      }
    lineno = lineno + max(n, 0.0)
    return
    end
#-h- space.q          403 asc 08-may-80 10:57:56
   #------------------------------------------------------------
 ## space - space  n  lines or to bottom of page
    subroutine space(n)
#   integer min
    integer n
    include cpage

    call brk
    if (lineno >= bottom)
       return
    if (lineno == 0)
       call phead
    if (bottom - lineno >= n + 1)
      call skip(float(n))
    else
      call pfoot
    return
    end
#-h- spread.q        1071 asc 08-may-80 10:57:57
   #------------------------------------------------------------
 ## spread - spread words to justify right margin
    subroutine spread(buf, outp, nextra, outwds)
    character buf(MAXOUT)
    include cparam
#   integer min
    integer i, j, nb, ne, nextra, nholes, outp, outwds

    if (nextra <= 0 | outwds <= 1)
       return
    dir = 1 - dir   # reverse previous direction
    ne = nextra
    nholes = outwds - 1
    if (tival != inval & nholes > 1)
       nholes = nholes - 1
    i = outp
    j = min(MAXOUT, i+ne)
    outp = j
    while (i < j) {
       buf(j) = buf(i)
 #             check for a blank following a non-blank
       if (buf(i) == BLANK & buf(i-1) != BLANK) {
          if (dir == 0)
             nb = (ne-1) / nholes + 1
          else
             nb = ne / nholes
          ne = ne - nb
          nholes = nholes - 1
          for ( ; nb > 0; nb = nb - 1) {
             j = j - 1
             buf(j) = BLANK
             }
          }
       i = i - 1
       j = j - 1
       }
    return
    end
#-h- text.q          1307 asc 08-may-80 10:57:58
   #------------------------------------------------------------
 ## text - process text lines
    subroutine text(inbuf,blen)
    character inbuf(INSIZE), wrdbuf(INSIZE)
    integer getwrb
    integer blen, wlen, i, bs, j
    include cparam

    if (inbuf(1) == BLANK | inbuf(1) == NEWLINE)
       call leadbl(inbuf,blen)		     # move left, set tival
    if (ulval > 0) {                         # underlining
       call underl(inbuf, blen, wrdbuf, INSIZE)
       ulval = ulval - 1
       }
    if (boval > 0) {                         # boldfacing
       call bold(inbuf, blen, wrdbuf, INSIZE)
       boval = boval - 1
       }
    if (ceval > 0) {                         # centering
       call center(inbuf, blen)
       call rput(inbuf, blen-1)
       ceval = ceval - 1
       }
    else if (inbuf(1) == NEWLINE)            # all blank line
       call rput(inbuf,blen-1)
    else if (fill == NO)                     # unfilled text
       call rput(inbuf,blen-1)
    else {                                   # filled text
       for (i = 1; getwrb(inbuf, i, wrdbuf, wlen) > 0; )
           call putwrd(wrdbuf, wlen, bs)
       }
    return
    end
#-h- underl.q         618 asc 08-may-80 10:57:59
   #------------------------------------------------------------
 ## underl - underline a line
    subroutine underl(buf, blen, tbuf, size)
    integer i, blen, size
    character buf(size), tbuf(size)
    include cparam

    blen = 1      # expand into tbuf
    for (i = 1; buf(i) != NEWLINE & blen < size-1; i = i + 1) {
       tbuf(blen) = buf(i)
       blen = blen + 1
       if (buf(i) != BLANK & buf(i) != TAB & buf(i) != BACKSPACE &
	     buf(i) != supch & buf(i) != subch) {
          tbuf(blen) = BACKSPACE
          tbuf(blen + 1) = UNDERLINE
          blen = blen + 2
          }
       }
    tbuf(blen) = NEWLINE
    tbuf(blen+1) = EOS
    call scopy(tbuf, 1, buf, 1)   # copy it back to buf
    return
    end
#-h- width.q          383 asc 08-may-80 10:58:00
   #------------------------------------------------------------
 ## width - compute width of character string
    integer function width(buf)
    character buf(MAXLINE)
    integer i
    include cparam

    width = 0
    for (i = 1; buf(i) != EOS; i = i + 1)
       if (buf(i) == BACKSPACE)
          width = width - 1
       else if (buf(i) == subch | buf(i) == supch)
	  ;
       else if (buf(i) == fontch)
	  width = width - 1
       else if (buf(i) != NEWLINE)
          width = width + 1
    return
    end
#-h- bold.q           692 asc 08-may-80 10:58:01
   #------------------------------------------------------------
 ## bold - bold-face or overstrike a line
    subroutine bold(buf, blen, tbuf, size)
    integer i, blen, size
    character buf(size), tbuf(size)
    include cparam

    blen = 1      # expand into tbuf
    for (i = 1; buf(i) != NEWLINE & blen < size-1; i = i + 1) {
       tbuf(blen) = buf(i)
       blen = blen + 1
       if (buf(i) != BLANK & buf(i) != TAB & buf(i) != BACKSPACE &
	     buf(i) != supch & buf(i) != subch) {
          tbuf(blen) = BACKSPACE
          tbuf(blen+1) = tbuf(blen-1)
          tbuf(blen+2) = BACKSPACE
          tbuf(blen+3) = tbuf(blen+1)
          blen = blen + 4
          }
       }
    tbuf(blen) = NEWLINE
    tbuf(blen+1) = EOS
    call scopy(tbuf, 1, buf, 1)   # copy it back to buf
    return
    end
#-h- even.q           250 asc 08-may-80 10:58:02
   #------------------------------------------------------------
 ## even - integer function returning true if integer is even
    integer function even(i)
    integer i,mod

    if(mod(i,2) == 0) even = YES
        else even = NO
    return
    end
#-h- getwrb.q        1246 asc 08-may-80 10:58:02
   #----------------------------------------------------------
 ## getwrb - new getwrd -- hangs onto trailing blanks, breaks on CR
    integer function getwrb(in,i,out,outlen)
    character in(ARB),out(ARB)
    integer i, outlen
#    include cout

#    if (in(i) == CR)
#      if (in(i + 1) == NEWLINE) {
#	if (outp == 0)
#	  outp = 1
#	call brk
#	i = i + 1
#	}
    outlen = 0
#    now count and copy non-blank characters
    while (in(i) != BLANK & in(i) != TAB & in(i) != NEWLINE) {
        outlen = outlen + 1
        out(outlen) = in(i)
        i = i + 1
        }
    while (in(i) == BLANK | in(i) == TAB) {
        outlen = outlen + 1
        out(outlen) = BLANK				# for now!
        i = i + 1
        }
    if (in(i) == NEWLINE & outlen > 0)
      if (out(outlen) != BLANK & out(outlen) != TAB) {
	outlen = outlen + 1
	out(outlen) = BLANK
	}
    out(outlen + 1) = EOS
    getwrb = outlen
    return
    end
#-h- jcopy.q          343 asc 08-may-80 10:58:04
   #-------------------------------------------------------
 ## jcopy - scopy without copying EOS
    subroutine jcopy(from,i,to,j)
    character from(ARB),to(ARB)
    integer i,j,k1,k2


    k1 = i
    k2 = j
    while (from(k1) != EOS)
        {
        to(k2) = from(k1)
        k1 = k1 + 1
        k2 = k2 + 1
        }
    return
    end
#-h- gfield.q         761 asc 08-may-80 10:58:04
   #--------------------------------------------------------------
 ## gfield - get next tab or title field
    integer function gfield(buf,i,n,temp,delim)
    character buf(ARB), temp(ARB), delim
    integer i, j, n
    j = 1
    if (n > 0)
        {
        if (buf(i) == delim) i = i + 1  # step over delimiter
        while (buf(i) != delim & buf(i) != EOS & buf(i) != NEWLINE &
               j <= n)
            {
            temp(j) = buf(i)
            j = j + 1
            i = i + 1
            }
        }
    temp(j) = EOS    # terminate temp
    gfield = j - 1   # set to number of characters copied
    while (buf(i) != delim & buf(i) != EOS & buf(i) != NEWLINE)  i = i + 1
            #  space to delimiter or to end of string
    return
    end
#-h- justfy.q         499 asc 08-may-80 10:58:05
   #------------------------------------------------------------------
 ## justfy - justifies string in its tab column
    subroutine justfy(in,left,right,type,out)
    character in(ARB), out(ARB)
#   integer max
    integer left, right, type, j, n, width
    n = width(in)
    if (type == RIGHT) call jcopy(in,1,out,right-n)
    else if (type == CENTER)
        {
        j = max((right+left-n)/2,left)
        call jcopy(in,1,out,j)
        }
    else call jcopy(in,1,out,left)
    return
    end
#-h- sbst.q           645 asc 08-may-80 10:58:06
   #--------------------------------------------------------------------
 ## sbst  - substitutes a string for a specified character
    subroutine sbst (in,char,out,subara,n)
    character in(ARB), char, out(ARB), subara(ARB)
    integer i, j, k, n
    i = 1
    j = 1
    while (in(i) != EOS)
        {
        if (in(i) == char)
            {
            for (k=1; k<=n; k=k+1)
                {
                out(j) = subara(k)
                j = j + 1
                }
            }
        else
            {
            out(j) = in(i)
            j = j + 1
            }
        i = i + 1
        }
    out(j) = EOS
    return
    end
#-h- skipbl           186 asc  3-oct-80 11:28:23
 ## skipbl - skip blanks and tabs at lin(i)
   subroutine skipbl(lin, i)
   character lin(ARB)
   integer i
 
   while (lin(i) == BLANK | lin(i) == TAB)
      i = i + 1
   return
   end
