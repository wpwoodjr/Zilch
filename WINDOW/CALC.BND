  # Zilch Screen Editor
  #   Copyright (c) 1982,1983,1984,1986,1987 William P. Wood, Jr.
  # Calculator bindings and function definitions for standard Zilch
  # This file is %included by ZBIND.BND

%mode					calc
  define(header,implicit integer (a-p,r-z); implicit logical (q))

  define(unbound_key_sequence, error = true)
  define(qio_error, break)
  define(qio_error_in_insert_mode, next)	# can't happen here
  define(control_y_interrupt, call redraw)
  define(end_function_definition, next)

  subroutine calc
  header
  include "session.cmn"
  include "pushb.cmn"
  include "screen.cmn"
  byte get_tty_character
  integer cmd, error, state, mode
  save error, state
  data error, state /false, 0/
  string pr "Calc>* xxxxxxxxxxxxxx"
  character*14 ch_x
  equivalence (pr(8), ch_x)
  integer exp
  save exp
  data exp /0/
  real x, y, z, t, tmp, m
  save x, y, z, t, tmp, m
  data x, y, z, t, tmp, m /6*0.0/

  mode = bi_use_keymap(CALC_MODE)
  se_in_prompt = true
  sc_cursor_y = sc_size

  repeat {
    write(ch_x, (g14.7), err=10) x
    if (m != 0.0)
      pr(6) = '*'
    else
      pr(6) = ' '

    if (false) {
 10   ch_x = "Error - clear "
      error = true
      call ms_message(pr)
      call ms_error(EOS)
      }
    else {
      call ms_message(pr)
      if (error) {
	call ms_error(EOS)
	error = false
	}
      }
    cmd = bi_get_command()

calc_exit				^Z
    if (error) {
      x = 0.0
      exp = 0
      state = 2
      error = false
      }
    break
calc_exit				`
calc_exit				^[

calc_clear				c
    x = 0.0
    exp = 0
    state = 2
    error = false

calc_digit				0-9	# enter a digit into X reg
    if (error)
      goto 10
    if (state == 0) {
      t = z
      z = y
      y = x
      }
    if (state != 1) {
      x = 0.0
      exp = 0
      }
    if (pu_last_key_struck == '.') {
      if (exp == 0)
	exp = 1
      }
    else if (exp != 0) {
      exp = exp*10
      x = (x*exp + (pu_last_key_struck - '0'))/exp
      }
    else
      x = x*10 + (pu_last_key_struck - '0')
    state = 1
calc_digit				.

calc_enter				^M	# terminate entry into X reg
    if (error)
      goto 10
    t = z
    z = y
    y = x
    if (state == 1)
      state = 2
    else
      state = 0

calc_chs				~
    if (error)
      goto 10
    x = -x
    state = 0

calc_plus				+
    if (error)
      goto 10
    x = y + x
    y = z
    z = t
    state = 0

calc_minus				\-
    if (error)
      goto 10
    x = y - x
    y = z
    z = t
    state = 0

calc_mult				*
    if (error)
      goto 10
    x = y*x
    y = z
    z = t
    state = 0

calc_divide				/
    if (error)
      goto 10
    if (abs(x) < 1e-10)
      goto 10
    x = y/x
    y = z
    z = t
    state = 0

calc_invert				i
    if (error)
      goto 10
    if (abs(x) < 1e-10)
      goto 10
    x = 1/x
    state = 0

calc_store				s
    if (error)
      goto 10
    m = x
    state = 0

calc_recall				m
    if (error)
      goto 10
    if (state != 2) {
      t = z
      z = y
      y = x
      }
    x = m
    state = 0

calc_switch				w
    if (error)
      goto 10
    tmp = x
    x = y
    y = tmp
    state = 0

calc_roll_down				r
    if (error)
      goto 10
    tmp = x
    x = y
    y = z
    z = t
    t = tmp
    state = 0

    }
  mode = bi_use_keymap(mode)
  se_in_prompt = false
  return
  end
