#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "session.cmn"
  include "memory.cmn"
  include "screen.cmn")

  subroutine ms_message(mess)
  header
  byte mess(ARB)

  call ms_message2(mess,null)
  return
  end

  subroutine ms_message3(mess, st, stlen, dot)
  header
  byte mess(ARB),char

  if (! se_error_occurred) {
    len = ho_length(mess)
    call sc_fill_line(sc_size, mess, len)
    sc_cursor_x = len + 1
    if (st != null) {
      for (i = 1; i <= stlen; i = i+1) {
	char = st_buffer(st+i-1)
	switch (char) {
	  case TAB:
	    for (j = len + 8 - mod(len, 8); len < j; len = len+1)
	      call sc_add_to_line(sc_size,' ',1)
	  case 0-_arith(TAB,-,1),_incr(TAB)-8%37:
	    len = len+2
	    call sc_add_to_line(sc_size,'^',1)
	    call sc_add_to_line(sc_size,char+8%100,1)
	  case " "-"~":
	    len = len+1
	    call sc_add_to_line(sc_size,char,1)
	  default:
	    len = len+4
	    call sc_add_to_line(sc_size,'\',1)
	    ichar = char
	    call sc_add_to_line(sc_size,'0' + (ichar & 8%300)/8%100,1)
	    call sc_add_to_line(sc_size,'0' + (ichar & 8%70)/8%10,1)
	    call sc_add_to_line(sc_size,'0' + (ichar & 8%7),1)
	  }
	if (dot == i+1)
	  sc_cursor_x = len + 1
	}
      }
    sc_cursor_x = min(sc_width, sc_cursor_x)
    }
  return
  end

  subroutine ms_message2(mess, st)
  header
  byte mess(ARB)

  if (! se_error_occurred) {
    call sc_fill_line(sc_size, mess, ho_length(mess))
    if (st != null)
      call sc_add_to_line(sc_size, st_buffer(st), st_length(st))
    sc_cursor_x = min(sc_width, sc_new_length(sc_size)+1)
    }
  return
  end

  subroutine ms_user_message(msg, len)
  header
  byte msg(0:ARB)

  for (i = 0; i < len; i = i + 1)
    if (msg(i) == '%') {
      if (i + 4 < MAX_PROMPT) {
	call ho_itocrj((100*(wi_dot(se_current_window)-1))/ _
			    max(1, bu_size(se_current_buffer)), msg(i), 4)
	msg(i + 3) = '%'
	if (i + 4 > len)
	  msg(i + 4) = EOS
	}
      break;
      }
  if (msg(0) == '!')
    call ms_error(msg(1))
  else
    call ms_message(msg)
  return
  end

  subroutine ms_add_to_message(mess)
  header
  byte mess(ARB)

  if (! se_error_occurred) {
    len = ho_length(mess)
    call sc_add_to_line(sc_size, mess, len)
    sc_cursor_x = min(sc_width, sc_new_length(sc_size)+1)
    }
  return
  end

  subroutine ms_error(mess)
  header
  byte mess(ARB)

  if (! se_error_occurred) {
    len = ho_length(mess)
    if (len > 0) {
      call sc_fill_line(sc_size, mess, len)
      sc_cursor_x = min(sc_width, sc_new_length(sc_size)+1)
      }
    }
  se_error_occurred = true
  sc_error_occurred = true
  return
  end

  subroutine ms_report_number(s1,n,s2)
  header
  byte s1(ARB), s2(ARB), num(15)

  if (! se_error_occurred) {
    call ms_message2(s1,null)
    call ho_itoc(n,num,15)
    call ms_add_to_message(num)
    call ms_add_to_message(s2)
    }
  return
  end

  subroutine ms_report_number2(s1,n,ss,sp)
  header
  byte s1(ARB), ss(ARB), sp(ARB)

  if (n == 1)
    call ms_report_number(s1,n,ss)
  else
    call ms_report_number(s1,n,sp)
  return
  end
