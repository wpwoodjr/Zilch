# Zilch Screen Editor, Copyright (c) 1982,1983,1984,1986,1987 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "session.cmn"
  include "memory.cmn")

  subroutine case_change
  header

  bu = se_current_buffer
  if (bu_mark1(bu) != 0 & bu_mark2(bu) != 0) {
    m1 = min(bu_mark1(bu), bu_size(bu)+1)
    m2 = min(bu_mark2(bu), bu_size(bu)+1)
    call tx_case_change(bu, min(m1, m2), max(m1, m2) - 1)
    }
  else
    call ms_error("Both marks must be set!")
  return
  end

  subroutine save_text
  header

  bu = se_current_buffer
  if (bu_mark1(bu) != 0 & bu_mark2(bu) != 0) {
    m1 = min(bu_mark1(bu), bu_size(bu)+1)
    m2 = min(bu_mark2(bu), bu_size(bu)+1)
    if (q_copy_region_to_buffer("Save", m1, m2))
      call ms_report_number2("Saved ", abs(m1 - m2),
	  " character.", " characters.")
    }
  else
    call ms_error("Both marks must be set!")
  return
  end

  subroutine extract_text
  header

  bu = se_current_buffer
  if (bu_mark1(bu) != 0 & bu_mark2(bu) != 0) {
    m1 = min(bu_mark1(bu), bu_size(bu)+1)
    m2 = min(bu_mark2(bu), bu_size(bu)+1)
    call delete_region_to_buffer("Save", m1, m2)
    call ms_report_number2("Extracted ", abs(m1 - m2),
						" character.", " characters.")
    call mk_set_mark(bu_mark1_ptr(bu), 0, bu)
    call mk_set_mark(bu_mark2_ptr(bu), 0, bu)
    }
  else
    call ms_error("Both marks must be set!")
  return
  end

  subroutine delete_text
  header

  bu = se_current_buffer
  if (bu_mark1(bu) != 0 & bu_mark2(bu) != 0) {
    m1 = min(bu_mark1(bu), bu_size(bu)+1)
    m2 = min(bu_mark2(bu), bu_size(bu)+1)
    call delete_region(m1, m2)
    call ms_report_number2("Deleted ", abs(m1 - m2),
						" character.", " characters.")
    call mk_set_mark(bu_mark1_ptr(bu), 0, bu)
    call mk_set_mark(bu_mark2_ptr(bu), 0, bu)
    }
  else
    call ms_error("Both marks must be set!")
  return
  end

  subroutine add_text_after_cursor
  header

  bu = se_current_buffer
  call mk_set_mark(bu_mark1_ptr(bu), wi_dot(se_current_window), bu)
  call yank_buffer("Save")
  call mk_set_mark(bu_mark2_ptr(bu), wi_dot(se_current_window), bu)
  wi_dot(se_current_window) = bu_mark1(bu)
  return
  end

  subroutine add_text_before_cursor
  header

  bu = se_current_buffer
  call mk_set_mark(bu_mark1_ptr(bu), wi_dot(se_current_window), bu)
  call yank_buffer("Save")
  call mk_set_mark(bu_mark2_ptr(bu), wi_dot(se_current_window), bu)
  return
  end

  subroutine save_location
  header

  bu = se_current_buffer
  call mk_set_mark(bu_save_dot_ptr(bu), wi_dot(se_current_window), bu)
  call mk_set_mark(bu_save_bow_ptr(bu), wi_bow(se_current_window), bu)
  call ms_message("Current location saved.")
  return
  end

  subroutine exchange_dot_and_save_location
  header

  bu = se_current_buffer
  wi_dot(se_current_window) = min(bu_size(bu)+1,
    mk_set_mark(bu_save_dot_ptr(bu), wi_dot(se_current_window), bu))
  wi_set_bow(se_current_window, find_bol(bu,
    mk_set_mark(bu_save_bow_ptr(bu), wi_bow(se_current_window), bu)))
  return
  end

  subroutine goto_save_location
  header

  bu = se_current_buffer
  wi_dot(se_current_window) = min(bu_size(bu)+1, bu_save_dot(bu))
  wi_set_bow(se_current_window, find_bol(bu,bu_save_bow(bu)))
  return
  end

  subroutine write_text
  header

  bu = se_current_buffer
  if (bu_mark1(bu) != 0 & bu_mark2(bu) != 0) {
    st = st_allocate(MAX_PROMPT)
    if (q_pr_read_prompt(_
  "Where to print (eg. HQ:FILE.OUT, or RETURN for local printer): ",st,len)) {
      m1 = min(bu_mark1(bu), bu_size(bu)+1)
      m2 = min(bu_mark2(bu), bu_size(bu)+1)
      if (len == 0) {
	call ho_scopy("SYS$COMMAND", 1, st_buffer(st), 1)
	call te_printer_on
	call ti_flush
	se_interrupt_enabled = true	# allow printer output to be aborted
	}
      if (q_fi_write_region(bu,st_buffer(st),min(m1,m2),max(m1,m2)-1,'N',stat)) {
	if (len > 0) {
	  call ms_message("Wrote ")
	  call ms_add_to_message(st_buffer(st))
	  }
	}
      else {
	call ms_message2("Can't write ",st)
	call ms_error(EOS)
	}
      if (len == 0) {
	se_interrupt_enabled = false
	call te_printer_off
	call ti_flush
	call redraw
	}
      }
    call st_deallocate(st)
    }
  else
    call ms_error("Both marks must be set!")
  return
  end

  function mk_new(mark)
  header

  mk_new = me_allocate(mk_sizeof)
  mk_next(mk_new) = null
  mk_mark(mk_new) = mark
  return
  end

  function mk_link(mk, bu)
  header

  mk_map(bu_markers(bu), mk2)
    if (mk2 == mk)
      return(mk)
  mk_next(mk) = bu_markers(bu)
  bu_markers(bu) = mk
  return(mk)
  end

  function mk_unlink(mk, bu)
  header

  prev = null
  mk_map(bu_markers(bu), mk2)
    if (mk2 == mk) {
      if (prev == null)
	bu_markers(bu) = mk_next(mk)
      else
	mk_next(prev) = mk_next(mk)
      break
      }
    else
      prev = mk2
  mk_next(mk) = null
  return(mk)
  end

# If a mark is 0 or 1, it needn't be in the buffer's list of marks
# because its value can't change.  This routine sets a mark, and unlinks
# or links it into the buffer's mark list depending on the new mark value
  function mk_set_mark(mk, mark, bu)
  header

  mk_set_mark = mk_mark(mk)
  mk_mark(mk) = mark
  if (mark > 1)
    call mk_link(mk, bu)
  else
    call mk_unlink(mk, bu)
  return
  end
