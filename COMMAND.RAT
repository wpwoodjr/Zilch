#	Zilch Screen Editor, Copyright (c) 1982 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q))

  function q_co_get(prompt,buf)
  header
  byte prompt(ARB), buf(ARB)
  logical first
  data first/true/

  q_co_get = false
  len = 0
  if (first) {
    first = false
    call getmcr(buf, len)
    if (len > 0) {
      q_co_get = true
_ifndef(VAX)
      for (i = 1; i < len; i = i+1)
	if (buf(i) == ' ' | buf(i+1) == '/')
	  break
      j = i
      for (i = i+1; i <= len; i = i+1)
	buf(i-j) = buf(i)
      len = len - j
_enddef
      }
    }

  buf(max0(1, min0(MAX_COMMAND, len+1))) = EOS
  return
  end

_ifdef(VAX)
# getmcr - get foreign command line for VAX
  subroutine getmcr(buf, len)
  header
  byte buf(MAX_COMMAND)
  real*8 icr_stdescr
  logical first
  data first /true/

  if (first) {
    first = false
    if (lib$get_foreign(icr_stdescr(%descr(buf), MAX_COMMAND-1), , len))
      if (len > 0)
        return
    }
  len = -80
  return
  end
_enddef

# q_co_parse - return first arg in comand and delete it from comand
  function q_co_parse(comand, arg, comma)
  header
  byte comand(ARB), arg(ARB), ho_clower
  logical comma, litral, inbrak

  for (k = 1; comand(k) == ' ' | (comma & comand(k) == ','); k = k+1)
    ;
  for ([litral = false; inbrak = false; j = k];
	    comand(j) != EOS & (litral | inbrak | (comand(j) != ' ' &
	    (comand(j) != ',' | !comma) & (j == k | comand(j) != '/')));
	j = j+1) {
    if (comand(j) == '"')
      if (comand(j+1) == '"') {
	arg(j-k+1) = '"'
	j = j+1
	}
      else
	litral = !litral
    else if ((comand(j) == '<' | comand(j) == '[') & ! litral)
      inbrak = true
    else if ((comand(j) == '>' | comand(j) == ']') & ! litral)
      inbrak = false
    if (litral)
      arg(j-k+1) = comand(j)
    else
      arg(j-k+1) = ho_clower(comand(j))
    }
  arg(j-k+1) = EOS
  call ho_scopy(comand, j, comand, 1)
  return(j != k)
  end
 
define(isupper,($1 >= 'A' & $1 <= 'Z'))

# q_co_matswi - match a switch
  function q_co_matswi(swtch, templ, ler, errmsg, n, cbuf, csize)
  header
  byte swtch(ARB), templ(ARB), errmsg(ARB), cbuf(ARB), ho_clower
  logical ler

  for ([i = 1; j = 1]; templ(j) != EOS & templ(j) != '='; j = j+1)
    if (ho_clower(swtch(i)) == ho_clower(templ(j)) & i == j)
      i = i+1
    else if (isupper(templ(j)))
      return(false)

  if (templ(j) == EOS)
    if (swtch(i) == EOS)
      return(true)
    else if (swtch(i) == '=') {
      call co_error(swtch, i, "No switch argument expected.")
      ler = true
      return(false)
      }
  if (swtch(i) != '=') {
    if (swtch(i) != EOS)
      return(false)
    if (errmsg(1) != EOS)
      call co_error(swtch, i, "Switch argument expected.")
    ler = true
    return(false)
    }

  bs = i+1
  es = ho_length(swtch) + 1

  switch (templ(j+1)) {
    case '#':
      decode(es-bs, (i<es-bs>), swtch(bs), err=10) ntmp

    case '"':
      for([i = bs; j = 1]; swtch(i) != EOS & j <= csize; [i = i+1; j = j+1])
	cbuf(j) = swtch(i)
      if (j > csize | j <= 1)
	goto 10
      cbuf(j) = EOS
      ntmp = j-1

    default:
	goto 10
1	continue
    }

  n = ntmp
  return(true)

10
  if (errmsg(1) != EOS)
    call co_error(swtch, bs, errmsg)
  ler = true
  return(false)
  end
 
  subroutine co_error(swtch, i, errmsg)
  header
  byte errmsg(ARB)
 
  call ti_kill
  call send_message_to_terminal(errmsg)
  call ti_finish
  call exit
  return
  end
