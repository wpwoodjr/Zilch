#	Zilch Screen Editor, Copyright (c) 1982,1983,1984 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "memory.cmn"
  include "session.cmn"
  include "screen.cmn")
define(check_status,{if (! ($&)) goto 10})

  subroutine dcl_call
  header
  include "terminal.cmn"
  include "dcl.cmn"

  call te_finish
  call te_pos(sc_size,1)
  call ti_flush
  if ((ti_ctrl_mask & 16%2000000) != 0)
    check_status(dcl_spawn("$ set control=y ! 'f$verify(0)'", 31))
  if ((ti_ctrl_mask & 16%100000) != 0)
    check_status(dcl_spawn("$ set control=t ! 'f$verify(0)'", 31))
  check_status(dcl_spawn("$ if save_verify then set verify ! 'f$verify(0)'",48))
  check_status(dcl_spawn_eof())
  call ti_enable_ctrl
  call lib$disable_ctrl(16%2100000, )
# must dissasociate mailbox and terminal here
  status = dcl_spawn("$ save_verify := 'f$verify(0)'", 30)
  call lib$enable_ctrl(ti_ctrl_mask)
  call ti_disable_ctrl
  call redraw
  check_status(status)
  if (pid != 0) {				# subprocess deleted?
    check_status(dcl_spawn('$ set noon', 10))
    check_status(dcl_spawn('$ on control_y then continue', 28))
    check_status(dcl_spawn('$ set control=y', 15))
    check_status(dcl_spawn('$ set nocontrol=t', 17))
    }
  return

10						# here if bad io status
  return
  end

  subroutine dcl_xcall
  header
  include "terminal.cmn"
  descriptor ch_descr

  st = st_allocate(MAX_PROMPT)
  wi = se_current_window
  if (q_pr_read_prompt("$ ",st,len))
    if (q_bu_find_window("Session log")) {
      size = bu_size(se_current_buffer)
      wi_dot(se_current_window) = size + 1
# only insert stuff if succesfully sent to subproccess
      call insert_string("$ ")
      for (i = st; i < st+len; i = i+1)
	call insert_character(st_buffer(i))
      if (len > 0) {
	if (mbx_channel != 0)
	  status = dcl_spawn(st_buffer(st), len)
	else {
	  call line_to_top_of_window
	  call sc_update(0)
	  status = lib$spawn(ch_descr(st_buffer(st), len), "nl:",
		  "sys$login:session.log")
	  }
	call insert_character(NEWLINE)
	}
      else {
	call line_to_top_of_window
	call sc_update(0)
	call te_finish
	call te_pos(sc_size,1)
	call ti_flush
	call ti_finish
	status = lib$spawn( , "SYS$COMMAND", "sys$login:session.log")
	call ti_initialize
	call redraw
	}
      if (! status) {
	call ms_report_number(_
      "Error number ", status, " occurred while trying to spawn a subprocess.")
	call ms_error(EOS)
	}
      else if (mbx_channel != 0 & len > 0)
	;
      else if (! q_fi_read_file(se_current_buffer,"sys$login:session.log",
					bu_size(se_current_buffer)+1, false))
	call ms_error("Can't read sys$login:session.log")
      else
	call q_fi_delete(WRITE_UNIT,"sys$login:session.log")
      bu_modified(se_current_buffer) = 0
      if (mbx_channel != 0 & len > 0)
	while (wi != se_current_window)
	  call next_window
      else
	wi_dot(se_current_window) = size + 1
      }
  call st_deallocate(st)
  return
  end

define(wr_dcl,sys$qiow(%val(DCL_IN_EFN), %val(dcl_mbx_channel),
	      %val(io$_writevblk), dcl_in_iosb, , , $1, %val($2), , , , ))
define(wr_zilch,sys$qio(%val(DCL_OUT_EFN), %val(mbx_channel),
	      %val(io$_writevblk | io$m_now), , , , $1, %val($2), , , , ))

  function dcl_spawn(command, clen)
  header
  include "terminal.cmn"
  include "syscodes.sym"
  include "dcl.cmn"
  byte command(1)
  character dcl_mbx_name*64, sys$command*63
  external dcl_abort_ast
  string delprc "%ZILCH-F-DELPRC, subprocess deleted",
	 cntrly "^Y@n"

  ctrl_y_count = 0
  status = ss$_normal
  if (pid == 0) {
    if (dcl_mbx_channel == 0)
      status = dcl_crembx(dcl_mbx_channel, dcl_mbx_name, dcl_mbx_namel)
    call ti_enable_ctrl
    status = sys$dassgn(%val(ti_channel))
    status = lib$spawn(_
	      '@'//dcl_mbx_name(1:dcl_mbx_namel)//'/output='//mbx_name,
	      'SYS$COMMAND', 'SYS$COMMAND', 1, , pid, , , dcl_abort_ast, )
    if (! status) {
      call ms_report_number(_
      "Error number ", status, " occurred while trying to spawn a subprocess.")
      call ms_error(EOS)
      }
    call icr_trnlog_str('SYS$COMMAND', sys$command)
    status = sys$assign(sys$command, ti_channel, , mbx_name)
# what do here
    if (! status)
      stop "Couldn't assign a channel to SYS$COMMAND"
    call ti_disable_ctrl
    statusq = wr_dcl(%ref("$ save_verify := 'f$verify(0)'"), 30)
    statusq = wr_dcl(%ref("$ set noon"), 10)
    statusq = wr_dcl(%ref('$ on control_y then continue'), 28)
    statusq = wr_dcl(%ref('$ set control=y'), 15)
    statusq = wr_dcl(%ref('$ @anl$disk:[wood.window.wood]dcl2.com '//_
		dcl_mbx_name(1:dcl_mbx_namel)//' '//mbx_name),
		40 + dcl_mbx_namel + len(mbx_name))
    }
  if (status) {
    status = wr_dcl(command, clen)
    if (status)
      status = dcl_in_iosb_status
    }
  return(status)

  entry dcl_spawn_eof
  status = sys$qiow(%val(DCL_IN_EFN), %val(dcl_mbx_channel),
	      %val(io$_writeof), dcl_in_iosb, , , , , , , , )
  if (status)
    status = dcl_in_iosb_status
  return(status)

  entry dcl_finish
  if (pid != 0)
    status = sys$delprc(pid, )
  return(status)

  entry dcl_ctrl_y
  if (pid != 0) {
    status = sys$cancel(%val(dcl_mbx_channel))
    rwm = sys$setrwm(%val(1))
    status = wr_zilch(cntrly, ho_length(cntrly))
    if (! se_error_occurred) {
      ctrl_y_count = ctrl_y_count + 1
      if (ctrl_y_count == 5) {
	status = sys$delprc(pid, )
	pid = 0
	status = wr_zilch(delprc, ho_length(delprc))
	}
      }
    if (rwm == ss$_wasclr)
      call sys$setrwm(%val(0))
    }
  return(status)
  end

  function dcl_abort_ast
  header
  include "dcl.cmn"

  pid = 0
  status = sys$cancel(%val(dcl_mbx_channel))
  return(status)
  end

  function dcl_crembx(chan, name, namel)
  header
  include "syscodes.sym"
  integer dvilst(4)
  character*(*) name

  status = sys$crembx( , chan, %val(132), %val(4*132), %val(16%FF0F), , )
  if (status) {
    dvilst(1) = ishft(dvi$_devnam, 16) | len(name)
    dvilst(2)  = %loc(name)
    dvilst(3)  = %loc(namel)
    dvilst(4)  = 0
    status = sys$getdvi(%val(0) , %val(chan), , dvilst, , , , )
    if (status)
      status = sys$waitfr(%val(0))
    }
  return(status)
  end

  function get_process_info(process_name, plen, pid, biocnt, bytcnt, astcnt)
  header
%	include '($jpidef)/nolist'
  integer*4 jpibuf(16)
  character*(*) process_name

  plen = 0
  jpibuf(1) = ishft(jpi$_prcnam,16) | len(process_name)
  jpibuf(2) = %loc(process_name)
  jpibuf(3) = %loc(plen)
  jpibuf(4) = ishft(jpi$_pid,16) | 4
  jpibuf(5) = %loc(pid)
  jpibuf(6) = 0
  jpibuf(7) = ishft(jpi$_biocnt,16) | 4
  jpibuf(8) = %loc(biocnt)
  jpibuf(9) = 0
  jpibuf(10) = ishft(jpi$_bytcnt,16) | 4
  jpibuf(11) = %loc(bytcnt)
  jpibuf(12) = 0
  jpibuf(13) = ishft(jpi$_astcnt,16) | 4
  jpibuf(14) = %loc(astcnt)
  jpibuf(15) = 0
  jpibuf(16) = 0

  return(sys$getjpi(,,,jpibuf,,,))
  end
