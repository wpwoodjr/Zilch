************
	1) indent works better, esp for fortran - can't indent < col 7,
	2) next and previous procedure works better - "end !" works

************
	1) attach back to Zilch after DCL uses /ID=xxxxxxxx instead
		of attach process_name
	2) added 52 line support
	3) Zilch now uses terminal page size for default screen length, eg.
		$ set ter/page=52
	   causes Zilch to use a screen size of 52, unless overridden
	   by the /len switch or by a restore of an old session.
	4) protection on .ZIL files is now SY:RWED,OW:RWED,GR,WO:D

************
	1) defaults carry through from one file to the next during
		visit files and on the command line, eg:

		$ zilch x.dat y
	   or

		wv x.dat y

	   both load in x.dat and y.dat

************
	^P writes marked region to a local printer, regular printer,
	or a file.

************
	WL shows files before buffers  (also, from before, has nicer looking
		output)
	Zilch does not warn about modified buffers without file names
		(ie. buffers not associated with a file)
		before exiting, as it used to, unless you are in a window
		on a modified buffer.  Then it asks "Save file [y]?"
		This makes it convenient to use buffers for scratch storage.

************
	~ puts you into a new mode, OVERSTRIKE mode, in which typed
	characters replace previous characters.  OVERSTRIKE is smart about
	writing over and adding TABS.
	The arrows work in OVERSTRIKE mode, also ^H, ^J, ^K, ^L, DEL,
	PF1, PF2, PF3, PF4, -, and . keys.
	INSERT HERE switches to insert and back again.
	Use `, ESC, or ^Z to exit OVERSTRIKE.

************
	The W# command sets the size below which a window will not be pushed
	by size changes in other windows.
	This command causes an incompatibility between new Zilch save files
	and old ones, so that new save files may not be used with old versions
	of Zilch.

	The WS (window shrink) and WE (window enlarge) commands do not produce
	an error beep when they cannot shrink or expand the window.
	This means they can be used in macros without terminating the macro
	because of an error status.

	New algorithm for computing screen update's output buffer size.
	Also, X# displays selected buffer size. It takes awhile for Zilch to
	select the buffer size.

************
	You can now enter any character during a prompt by typing a \ followed
	by the octal value of the desired character, eg. \377 or \177, etc.
	The display changes as you type in the octal value to reflect the
	value as computed to that point.  For instance, as you type \177,
	the display shows nothing after the \, then ^A after \1, then ^O
	after \17, then finally \177.

************
	new command line switch:

	  /word=characters

	lets you define your own set of characters which define what a
	word is for word movement commands, for example:

	  z/word="A-Za-z0-9"

	is the old default and specifies capital and little letters and 0
	through 9 as word characters.
	The ascii value of a character may be entered as an octal
	number after a backslash, for example:

	  z/word="\0-\177"

	defines every character from NUL to DEL as a word character.

	  z/word="a"""

	defines " and little a as word characters.

	  z/word="A-Za-z0-9,)"

	defines two classes of word characters, one is A-Za-z0-9 and the
	other is )   (the comma separates the classes.  For a literal
	comma, use "\," )
	At this time, 9 word classes may be defined by the user.

NEXT_WORD and PREVIOUS_WORD work by first scanning over characters that aren't
in any class, then determining a class to use based on the character
which stopped the scan, then scanning over characters in that class.
Class 0 is special.  It contains, for each character, the number of the
class that the character is in, and 0 if the character is not in a class.
In fact, a character may be in more than one class, but it's PRIMARY
class is the one indicated by Class 0;  when NEXT_WORD and PREVIOUS_WORD
check what class a character is in, they check Class 0.  If a character
is in a class that is not it's primary class, then it cannot be used
to start a scan in that class, but once a scan is started, it will be
scanned over.  It is possible for a character to have a secondary class
but not a primary class, in which case it can participate in scans but
never start one, since its primary class is class 0.
For example, the following class definitions scan over numbers, words,
and right parentheses, and are currently the default:

	z/word="A-Za-z~0-9,0-9~.A-Za-z,)"

The first class definition is "A-Za-z~0-9".  That means that A through Z and
little a through little z are primary class members, while 0-9 are secondary
class members. The ~ (tilde) separates the primary and secondary class
members.  This class scans over words beginning with A-Z or a-z until
encountering a character which is not A-Z, a-z, or 0-9.
The second class definition is "0-9~.A-Za-z".  It is separated from the
first class definition by a comma.  This class scans over numbers
beginning with 0-9 until encountering a character which is not a period,
A-Z, or a-z.  Note that period is not a primary member in any class,
but is a secondary member of the second class.  This means that it cannot
start a scan, but can be scanned over in a number starting with 0-9.
The third class contains only right parenthesis.

************
	The = command may now be used in CHANGE mode to cause a return
	to the current location when change mode is exited, instead of
	returning to where you were when the CHANGE command was started.

************
	Keyboard macros:

	KEYPAD 0	Execute the most recently defined macro.
	  or
	X0

	KEYPAD 1-9	Execute macros saved as 1-9.
	  or
	X1-X9

	KEYPAD .	Followed by a keypad number causes it to move the
	  or		currently defined macro (keypad 0) into the new keypad
	XR0-XR9		key.

	Can stop defining a macro in insert mode or overstrike mode
	  with ^]
	Can call macros from within other macros.
	Can write (XW) and get (XG) macros.
	Can specify a file of macros to be read on the command line:
		$ z/macros=file
	The macros in this file are overridden by restored macros.
	By default, macros are read/written to sys$login:zilch.macros
	  if the macro file is not specified on the command line.

************
	Line editing of prompts:
	  insert mode only; no overstrike; ^A recalls save buffer instead
	  no delete previous word; ^J is NEWLINE character for Zilch
	    pr_kill_to_beginning_of_line	^U
	    pr_delete_previous_character	DEL
	    pr_previous_line			^B, up arrow
	    pr_next_line			down arrow
	    pr_previous_character		^D, left arrow
	    pr_next_character			^F, right arrow
	    pr_end_of_line			^E
	    pr_beginning_of_line		^H, F12
	    pr_add_text_before_cursor		^A (from save buffer)
	    pr_abort				^G
	    pr_special_character		\nnn, \@ = \0, \c = c

************
	! forces a checkpoint of modified files
	500! sets the checkpoint frequency to 500.  By default
	it is 400.

************
	In addition to the standard keys, the following keys now function as
	shown:

	Key		Function:
	-------------	-----------------------------------------------------
	` (acc. grave)	Now works to switch between control and insert mode.
			this will be especially useful with the DEC LK201 
			keyboard.
	F11 (ESC)	Now works to switch modes between control and insert
			whether the terminal in VT200 or VT100 mode.
	F12 (BS)	Now works as previous character in both control and
			insert mode whether the terminal is in VT200 or VT100
			mode.
	F13 (LF)	Now works as next line in both control and insert mode
			whether the terminal is in VT200 or VT100 mode.
	HELP (F15)	Invokes the help function (as does ?).
	INSERT HERE	Switches back and forth between overstrike mode (see
			below).
	PREVIOUS SCREEN	Goes back to top of last screen (equivalent to typing
			WTY).
	NEXT SCREEN	Goes to top of next screen (equivalent to typing WTN).
	arrow keys	Work as expected in both modes.
	PF1		Search again in reverse (equivalent to typing \<CR>).
	PF2		Search again forward (equivalent to typing /<CR>).
	PF3		Delete word backwards.
	PF4		Delete word forward.
	KEYPAD -	Delete to end of line.
	KEYPAD ,	Delete next character.
	KEYPAD 0	Execute the most recently defined macro.
	KEYPAD 1-9	Execute macros saved as 1-9.
	KEYPAD .	Followed by a keypad number causes it to move the
			currently defined macro (keypad 0) into the new keypad
			key.
