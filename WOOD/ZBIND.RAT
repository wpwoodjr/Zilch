  # Zilch Screen Editor, Copyright (c) 1982,1983,1984,1986 William P. Wood, Jr.
  # Keyboard bindings and function definitions for standard Zilch
  # Zilch Screen Editor, Copyright (c) 1982,1983,1984,1986 William P. Wood, Jr.
  # Keyboard bindings and function definitions for standard Zilch
  # This file is %included by ZBIND.BND
  # Begin initial code
  define(header,implicit integer (a-p,r-z); implicit logical (q)
    include "session.cmn"
    include "bind.cmn"
    include "pushb.cmn"
    include "memory.cmn")
  define(unbound_key_sequence,
    if (cmd < 1000)
      call ms_error(EOS)
    else if (cmd < 2000)
      call ky_macro(cmd - 1000)
    else if (cmd < 3000) {
      hugcol = abs(hugcol)
      call ma_invoke(cmd - 1999)
      }
    else if (cmd < 4000)
      call ma_replace(cmd - 2999)
    else if (cmd < 5000) {
      call bi_use_keymap(cmd - 4000)
      call ms_report_number("Mode ", cmd - 4000, EOS)
      }
    else
      call ms_error(EOS))
  define(qio_error, if (q_fi_write_modif_file_buffers()) exit)
  define(qio_error_in_insert_mode, se_count = 1; call in_exit)
  define(control_y_interrupt, call redraw)
  define(end_function_definition,next)
  define(exit,goto (10,20), exitla)
    subroutine ky_edit
    header
    byte c, c2, find_next_character
    save checkpoint_frequency
    data checkpoint_frequency /400/
    st = st_allocate(MAX_PROMPT)
    exitla = 1
    hugcol = 0
  20
    if (exitla == 2) {
      exitla = 1
      call pa_switch(pa_number(paold))
      }
    repeat {
      if (bu_size(pu_buffer) == 0) {
	se_command_count = se_command_count+1
	if (se_command_count >= checkpoint_frequency)
	  if (pu_last_key_struck != RUBOUT) {
	    call checkpoint_modified_files
	    se_command_count = 0
	    }
	}
      cmd = bi_get_command()
      se_count = 2
      while (se_count > 1 & ! se_error_occurred) {
	se_count = se_count - 1
	hugcol = - max(0,hugcol)
  # End initial code
      goto (2001, 2002, 2003 _
       , 1001 _
       , 1002 _
       , 1003 _
       , 1004 _
       , 1005 _
       , 1006 _
       , 1007 _
       , 1008 _
       , 1009 _
       , 1010 _
       , 1011 _
       , 1012 _
       , 1013 _
       , 1014 _
       , 1015 _
       , 1016 _
       , 1017 _
       , 1018 _
       , 1019 _
       , 1020 _
       , 1021 _
       , 1022 _
       , 1023 _
       , 1024 _
       , 1025 _
       , 1026 _
       , 1027 _
       , 1028 _
       , 1029 _
       , 1030 _
       , 1031 _
       , 1032 _
       , 1033 _
       , 1034 _
       , 1035 _
       , 1036 _
       , 1037 _
       , 1038 _
       , 1039 _
       , 1040 _
       , 1041 _
       , 1042 _
       , 1043 _
       , 1044 _
       , 1045 _
       , 1046 _
       , 1047 _
       , 1048 _
       , 1049 _
       , 1050 _
       , 1051 _
       , 1052 _
       , 1053 _
       , 1054 _
       , 1055 _
       , 1056 _
       , 1057 _
       , 1058 _
       , 1059 _
       , 1060 _
       , 1061 _
       , 1062 _
       , 1063 _
       , 1064 _
       , 1065 _
       , 1066 _
       , 1067 _
       , 1068 _
       , 1069 _
       , 1070 _
       , 1071 _
       , 1072 _
       , 1073 _
       , 1074 _
       , 1075 _
       , 1076 _
       , 1077 _
       , 1078 _
       , 1079 _
       , 1080 _
       , 1081 _
       , 1082 _
       , 1083 _
       , 1084 _
       , 1085 _
       , 1086 _
       , 1087 _
       , 1088 _
       , 1089 _
       , 1090 _
       , 1091 _
       , 1092 _
       , 1093 _
       , 1094 _
       , 1095 _
       , 1096 _
       , 1097 _
       , 1098 _
       , 1099 _
       , 1100 _
       , 1101 _
       , 1102 _
       , 1103 _
       , 1104 _
       , 1105 _
       , 1106 _
       , 1107 _
       , 1108 _
       , 1109 _
       , 1110 _
       , 1111 _
       , 1112 _
       , 1113 _
       ), cmd
      unbound_key_sequence
      end_function_definition
2001  qio_error
      end_function_definition
2002  qio_error_in_insert_mode
      end_function_definition
2003  control_y_interrupt
      end_function_definition
1001                                              # REPEAT_COUNT
	hugcol = abs(hugcol)
	call ky_repeat_count(se_count,cmd)
      end_function_definition
1002                                              # REDRAW
	call redraw
      end_function_definition
1003                                              # EXIT
	exit
      end_function_definition
1004                                              # WRITE_ALL_MODIFIED_FILES_AND_EXIT
	if (q_fi_write_modif_file_buffers())
	  exit
      end_function_definition
1005                                              # WRITE_ALL_MODIFIED_FILES
	call q_fi_write_modif_file_buffers
      end_function_definition
1006                                              # WRITE_CURRENT_BUFFER
	call q_fi_write_buffer(se_current_buffer)
      end_function_definition
1007                                              # WRITE_NAMED_FILE
	call q_fi_write_named_file(se_current_buffer)
      end_function_definition
1008                                              # READ_NAMED_FILE
	call q_fi_read_named_file(se_current_buffer)
      end_function_definition
1009                                              # GOTO_BEGINNING_OF_FILE
	call beginning_of_file
      end_function_definition
1010                                              # GOTO_LAST_LINES_OF_FILE
	call goto_last_lines_of_file
      end_function_definition
1011                                              # PREVIOUS_CHARACTER
	call previous_character
      end_function_definition
1012                                              # NEXT_CHARACTER
	call next_character
      end_function_definition
1013                                              # PREVIOUS_LINE
	call scroll_previous_line
      end_function_definition
1014                                              # NEXT_LINE
	call scroll_next_line
      end_function_definition
1015                                              # PREVIOUS_LINE_AND_HUG_COLUMN
	hugcol = abs(hugcol)
	call scroll_previous_line_col(hugcol)
      end_function_definition
1016                                              # NEXT_LINE_AND_HUG_COLUMN
	hugcol = abs(hugcol)
	call scroll_next_line_col(hugcol)
      end_function_definition
1017                                              # SCROLL_ONE_LINE_DOWN
	call scroll_one_line_down
	if (! q_dot_is_visible())
	  call previous_line
      end_function_definition
1018                                              # SCROLL_ONE_LINE_UP
	call scroll_one_line_up
	if (! q_dot_is_visible())
	  call next_line
      end_function_definition
1019                                              # PREVIOUS_HALF_SCREEN
	call previous_half_screen
      end_function_definition
1020                                              # NEXT_HALF_SCREEN
	call next_half_screen
      end_function_definition
1021                                              # PREVIOUS_SCREEN
	call previous_screen
      end_function_definition
1022                                              # NEXT_SCREEN
	call next_screen
      end_function_definition
1023                                              # PREVIOUS_WORD
	call previous_word
      end_function_definition
1024                                              # NEXT_WORD
	call next_word
      end_function_definition
1025                                              # PREVIOUS_SECTION
	call mp_previous_procedure
      end_function_definition
1026                                              # NEXT_SECTION
	call mp_next_procedure
      end_function_definition
1027                                              # ENDS_OF_LINE
	call ends_of_line
      end_function_definition
1028                                              # KILL_THROUGH_END_OF_LINE
	call kill_through_end_of_line
      end_function_definition
1029                                              # ADD_KILL_AFTER_CURSOR
	call yank_kill
      end_function_definition
1030                                              # SET_MARK1
	bu_mark1(se_current_buffer) = wi_dot(se_current_window)
	call ms_message("Mark 1 set.")
      end_function_definition
1031                                              # SET_MARK2
	bu_mark2(se_current_buffer) = wi_dot(se_current_window)
	call ms_message("Mark 2 set.")
      end_function_definition
1032                                              # CHANGE_CASE
	call case_change
      end_function_definition
1033                                              # WRITE_TEXT
	call write_text
      end_function_definition
1034                                              # SAVE_TEXT
	call save_text
      end_function_definition
1035                                              # EXTRACT_TEXT
	call extract_text
      end_function_definition
1036                                              # DELETE_TEXT
	call delete_text
      end_function_definition
1037                                              # ADD_TEXT_AFTER_CURSOR
	call add_text_after_cursor
      end_function_definition
1038                                              # SAVE_LOCATION
	call save_location
      end_function_definition
1039                                              # EXCHANGE_DOT_AND_SAVE_LOCATION
	call exchange_dot_and_save_location
      end_function_definition
1040                                              # GOTO_SAVE_LOCATION
	call goto_save_location
      end_function_definition
1041                                              # GET_CURRENT_INDENT
	call set_indent(current_indent())
      end_function_definition
1042                                              # INDENT_LINE
	call do_indent(se_indent)
      end_function_definition
1043                                              # EXDENT_LINE
	call do_indent(-se_indent)
      end_function_definition
1044                                              # SWITCH_TO_PAGE
	call switch_to_page(-1)
      end_function_definition
1045                                              # PREVIOUS_PAGE
	call pa_previous_page
      end_function_definition
1046                                              # NEXT_PAGE
	call pa_next_page
      end_function_definition
1047                                              # LIST_BUFFERS
	if (exitla == 1) {
	  paold = se_current_page
	  if (q_buffer_list())
	    exitla = 2
	  }
	else
	  call ms_error("Can't enter Buffer list!")
      end_function_definition
1048                                              # FILL_WINDOW
	call wi_fill
      end_function_definition
1049                                              # EQUALIZE_WINDOW
	call wi_equalize
      end_function_definition
1050                                              # VISIT_FILE
	if (q_pr_read_prompt("Visit file: ",st,len))
	  call multi_visit_file(st_buffer(st),false,true)
      end_function_definition
1051                                              # CHANGE_FILE
	if (q_pr_read_prompt("Change to file: ",st,len))
	  call multi_visit_file(st_buffer(st),true,true)
      end_function_definition
1052                                              # CHANGE_BUFFER
	if (q_pr_read_prompt("Change to buffer: ",st,len))
	  call q_switch_to_buffer(st_buffer(st))
      end_function_definition
1053                                              # VISIT_BUFFER
	if (q_pr_read_prompt("Visit buffer: ",st,len))
	  call q_pop_to_buffer(st_buffer(st))
      end_function_definition
1054                                              # ENLARGE_WINDOW
	if (! q_enlarge_window())
	  call ms_message("Can't enlarge window!")
      end_function_definition
1055                                              # SHRINK_WINDOW
	if (! q_shrink_window())
	  call ms_message("Can't shrink window!")
      end_function_definition
1056                                              # SET_MINIMUM_PUSHED_SIZE_OF_WINDOW
	wi_min_size(se_current_window) = wi_size(se_current_window)
	call ms_report_number2("Window size will not be pushed below ",
	  wi_min_size(se_current_window), " line.", " lines.")
      end_function_definition
1057                                              # SPLIT_WINDOW
	if (! q_split_current_window())
	  call ms_error("Can't split window!")
      end_function_definition
1058                                              # PREVIOUS_WINDOW
	call previous_window
      end_function_definition
1059                                              # NEXT_WINDOW
	call next_window
      end_function_definition
1060                                              # DELETE_WINDOW
	if (! q_delete_window())
	  call ms_error("Can't delete window!")
      end_function_definition
1061                                              # DELETE_OTHER_WINDOWS
	call delete_other_windows
      end_function_definition
1062                                              # BEGINNING_OF_WINDOW
	call beginning_of_window
      end_function_definition
1063                                              # TOGGLE_BUFFER_CASE
	call bu_switch_case
      end_function_definition
1064                                              # CHANGE_MAPPINGS
	call mp_change_mappings
      end_function_definition
1065                                              # START_REMEMBERING
	hugcol = abs(hugcol)
	call ma_begin
      end_function_definition
1066                                              # STOP_REMEMBERING
	hugcol = abs(hugcol)
	call ma_end
	se_count = se_count + 1
	cmd = bi_get_command()
      end_function_definition
1067                                              # WRITE_MACROS
	if (q_pr_read_prompt("Write macros to file (<CR> for default): ",st,
									len)) {
	  if (len == 0)
	    call st_scopy(se_macros, st)
	  if (! q_ma_write_macros(st_buffer(st))) {
	    call ms_message2("Can't write ",st)
	    call ms_error(EOS)
	    }
	  else {
	    call ms_message2("Wrote macros to ",st)
	    if (len != 0)
	      call ed_save_string(st, se_macros)
	    }
	  }
      end_function_definition
1068                                              # READ_MACROS
	if (q_pr_read_prompt("Get macros from file (<CR> for default): ",st,
									len)) {
	  if (len == 0)
	    call st_scopy(se_macros, st)
	  if (! q_ma_read_macros(st_buffer(st))) {
	    call ms_message2("Can't read ",st)
	    call ms_error(EOS)
	    }
	  else {
	    call ms_message2("Read macros from ",st)
	    if (len != 0)
	      call ed_save_string(st, se_macros)
	    }
	  }
      end_function_definition
1069                                              # SEARCH_FORWARD
	call q_search_forward(se_count)
      end_function_definition
1070                                              # SEARCH_REVERSE
	call q_search_reverse(se_count)
      end_function_definition
1071                                              # QUERY_REPLACE_STRING
	call query_replace_string(se_count)
      end_function_definition
1072                                              # ENTER_DCL
	call dcl_call
      end_function_definition
1073                                              # EXECUTE_DCL_COMMAND
	call dcl_xcall
      end_function_definition
1074                                              # HELP
	if (exitla == 1) {
	  paold = se_current_page
	  if (q_he_help())
	    exitla = 2
	  }
	else
	  call ms_error("Can't enter Help!")
      end_function_definition
1075                                              # DISPLAY_BUFFER_SIZE
	call up_display_buffer_size
      end_function_definition
1076                                              # CHECKPOINT_MODIFIED_FILES
	if (se_count > 1) {
	  checkpoint_frequency = se_count
	  se_count = 1
	  }
	else {
	  call checkpoint_modified_files
	  se_command_count = 0
	  }
      end_function_definition
1077                                              # DELETE_AND_ENTER_INSERT_MODE
	for ( ; se_count > 0; se_count = se_count - 1)
	  if (se_cross_lines)
	    call delete_previous_character
	  else if (! q_bol())
	    call delete_previous_character
	call in_enter
      end_function_definition
1078                                              # ENTER_INSERT_MODE
	se_count = 1
	call in_enter
      end_function_definition
1079                                              # ENTER_OVERSTRIKE_MODE
	se_count = 1
	st2 = st_allocate(st_length(wi_mode_line(se_current_window)) + 5)
	call ho_scopy('<O> ', 1, st_buffer(st2), 1)
	call st_scopy(wi_mode_line(se_current_window), st2+4)
	wi_mode_line(se_current_window) = st2
	wi_modified(se_current_window) = 1
	call bi_use_keymap(OVERSTRIKE_MODE)
      end_function_definition
1080                                              # IN_SELF_INSERT
	call in_self_insert
      end_function_definition
1081                                              # IN_NEWLINE
	call in_carriage_return
      end_function_definition
1082                                              # KILL_TO_BEGINNING_OF_LINE
	call kill_to_beginning_of_line
      end_function_definition
1083                                              # ADD_KILL_BEFORE_CURSOR
	call yank_buffer("kill")
      end_function_definition
1084                                              # ADD_TEXT_BEFORE_CURSOR
	call add_text_before_cursor
      end_function_definition
1085                                              # IN_DELETE_PREVIOUS_CHARACTER
	call in_delete_previous_character
      end_function_definition
1086                                              # IN_PREVIOUS_CHARACTER
	call in_post_inserted_text
	call previous_character
	call in_reenter
      end_function_definition
1087                                              # IN_NEXT_CHARACTER
	call in_post_inserted_text
	call next_character
	call in_reenter
      end_function_definition
1088                                              # IN_PREVIOUS_LINE
	call in_post_inserted_text
	call scroll_previous_line
	call in_reenter
      end_function_definition
1089                                              # IN_NEXT_LINE
	call in_post_inserted_text
	call scroll_next_line
	call in_reenter
      end_function_definition
1090                                              # IN_PREVIOUS_WORD
	call in_post_inserted_text
	call previous_word
	call in_reenter
      end_function_definition
1091                                              # IN_NEXT_WORD
	call in_post_inserted_text
	call next_word
	call in_reenter
      end_function_definition
1092                                              # TAB_TO_INDENT
	if (current_column() < bu_indent(se_current_buffer))
	  call tab_to_column(bu_indent(se_current_buffer))
	else
	  call insert_character(TAB)
      end_function_definition
1093                                              # SET_INDENT_AT_CURRENT_COLUMN
	call set_indent(current_column())
      end_function_definition
1094                                              # IN_INCREASE_INDENT
	call in_increase_indent
      end_function_definition
1095                                              # IN_DECREASE_INDENT
	call in_decrease_indent
      end_function_definition
1096                                              # EXIT_INSERT_MODE
	se_count = 1
	if (q_bi_in_mode(INSERT_MODE))
	  call in_escape
      end_function_definition
1097                                              # EXIT_INSERT_MODE_WITHOUT_POPPING_MAPPINGS
	se_count = 1
	if (q_bi_in_mode(INSERT_MODE))
	  call in_exit
      end_function_definition
1098                                              # GET_MAPPING
	call mp_get_mapping
      end_function_definition
1099                                              # OVERSTRIKE
	c = pu_last_key_struck
	if (bu_case(se_current_buffer) == 1)
	  if (pu_last_key_struck >= 'a' & pu_last_key_struck <= 'z')
	    c = pu_last_key_struck - 8%40
	c2 = find_next_character()
	if (c2 != NEWLINE)
	  if (c2 != TAB)
	    call delete_next_character
	  else if (mod(current_column(), 8) == 0)
	    call delete_next_character
	call insert_character(c)
      end_function_definition
1100                                              # NEWLINE
	call insert_character(NEWLINE)
      end_function_definition
1101                                              # OVERSTRIKE_TAB
	dot = wi_dot(se_current_window)
	curcol = current_column() - 1
	call goto_column(curcol+8-mod(curcol,8) + 1)
	call delete_region(dot, wi_dot(se_current_window))
	call insert_character(TAB)
      end_function_definition
1102                                              # DELETE_PREVIOUS_CHARACTER
	if (se_cross_lines)
	  call delete_previous_character
	else if (! q_bol())
	  call delete_previous_character
      end_function_definition
1103                                              # EXIT_OVERSTRIKE_MODE
	se_count = 1
	if (q_bi_in_mode(OVERSTRIKE_MODE)) {
	  call st_deallocate(wi_mode_line(se_current_window))
	  wi_mode_line(se_current_window) = bu_name(se_current_buffer)
	  wi_modified(se_current_window) = 1
	  call bi_use_keymap(CONTROL_MODE)
	  }
      end_function_definition
1104                                              # SELF_INSERT
	c = pu_last_key_struck
	if (bu_case(se_current_buffer) == 1)
	  if (pu_last_key_struck >= 'a' & pu_last_key_struck <= 'z')
	    c = pu_last_key_struck - 8%40
	call insert_character(c)
      end_function_definition
1105                                              # OPEN_LINE
	call insert_character(NEWLINE)
	call previous_character
      end_function_definition
1106                                              # DELETE_NEXT_CHARACTER
	if (se_cross_lines)
	  call delete_next_character
	else if (! q_eol())
	  call delete_next_character
      end_function_definition
1107                                              # KILL_TO_END_OF_LINE
	call kill_to_end_of_line
      end_function_definition
1108                                              # GOTO_END_OF_FILE
	call goto_end_of_file
      end_function_definition
1109                                              # BEGINNING_OF_LINE
	call beginning_of_line
      end_function_definition
1110                                              # END_OF_LINE
	call end_of_line
      end_function_definition
1111                                              # MESSAGE
	if (q_pr_read_prompt(EOS,st,len))
	  call ms_message(st_buffer(st))
      end_function_definition
1112                                              # ILLEGAL_OPERATION
	call ms_error(EOS)
      end_function_definition
1113                                              # NULL_OPERATION
	continue
	end_function_definition	#MAKEBIND isn't smart enough to put this at end
  # Begin final code
	}
      }
  10
    call st_deallocate(st)
    return
    end
    subroutine ky_repeat_count(count,cmd)
    header
    if (pu_last_key_struck >= '0' & pu_last_key_struck <= '9')
      call pu_push_back_character(pu_last_key_struck)
    if (q_get_tty_number(n,"Repeat count: ")) {
      count = n + 1
      cmd = bi_get_command()
      }
    return
    end
    subroutine ky_macro(num)
    header
    if (num < 0 | num >= NUM_MACROS)
      goto 10
    else if (bi_macros(num) == null) {
  10  call ms_report_number("Undefined macro: ", num, EOS)
      call ms_error(EOS)
      }
    else {
      mlen = bi_mem(bi_macros(num))
      call pu_push_back_buf(bi_mem(bi_macros(num) + 1), mlen)
      }
    return
    end
    subroutine ky_bind_keys
    header
    include "terminal.cmn"
    if (bi_keypad == KEYPAD_APPLICATION)
      te_application_keypad = true
    else
      te_application_keypad = false
    return
    end
  # End final code
  # Zilch Screen Editor, Copyright (c) 1982,1983,1984,1986 William P. Wood, Jr.
  # Prompt bindings and function definitions for standard Zilch
  # This file is %included by ZBIND.BND
  define(header,implicit integer (a-p,r-z); implicit logical (q)
    include "memory.cmn")
  define(unbound_key_sequence,
	q_status = false)
  define(qio_error,	# not really for QIO error;
			# had to do here since cannot bind to NULL
	if (pusize == -1) {			# read from user, not pushback
	  pusize = bu_size(pu_buffer)
	  bu_size(pu_buffer) = 0
	  })
  define(qio_error_in_insert_mode,		# can't happen here
	continue)
  define(control_y_interrupt,
	continue)				# rebound below
  define(end_function_definition,
	next)
  function q_pr_read_prompt(pr, st, len)
  header
  include "session.cmn"
  include "pushb.cmn"
  include "screen.cmn"
  byte pr(ARB)
  byte c, get_tty_character
  logical q_status
  byte last_st(MAX_PROMPT)
  save last_st, last_st_len
  data last_st(1) /EOS/, last_st_len /0/
  q_pr_read_prompt = true
  se_in_prompt = true
  sc_cursor_y = sc_size
  mode = bi_use_keymap(PROMPT_MODE)
  len = 0
  dot = 1
  st_buffer(st) = EOS
  q_status = true
  pusize = -1
  for (call ms_message(pr) ; ; call ms_message3(pr,st,len,dot)) {
	if (! q_status) {
	  call ms_error(EOS)
	  q_status = true
	  }
	cmd = bi_get_command()
      goto (2001, 2002, 2003 _
       , 1001 _
       , 1002 _
       , 1003 _
       , 1004 _
       , 1005 _
       , 1006 _
       , 1007 _
       , 1008 _
       , 1009 _
       , 1010 _
       , 1011 _
       , 1012 _
       , 1013 _
       , 1014 _
       ), cmd
      unbound_key_sequence
      end_function_definition
2001  qio_error
      end_function_definition
2002  qio_error_in_insert_mode
      end_function_definition
2003  control_y_interrupt
      end_function_definition
1001                                              # PR_SELF_INSERT
	q_status = q_pr_self_insert(st_buffer(st),len,dot,pu_last_key_struck)
      end_function_definition
1002                                              # EXIT_PROMPT_MODE
	break
      end_function_definition
1003                                              # PR_KILL_TO_BEGINNING_OF_LINE
	call pr_kill_to_beginning_of_line(st_buffer(st),len,dot)
      end_function_definition
1004                                              # PR_DELETE_PREVIOUS_CHARACTER
	call pr_delete_previous_character(st_buffer(st),len,dot)
      end_function_definition
1005                                              # PR_PREVIOUS_LINE
	len = last_st_len
	dot = len+1
	call movc(last_st, st_buffer(st), len+1)
      end_function_definition
1006                                              # PR_NEXT_LINE
	len = 0
	dot = 1
	st_buffer(st) = EOS
      end_function_definition
1007                                              # PR_PREVIOUS_CHARACTER
	dot = max(1, dot-1)
      end_function_definition
1008                                              # PR_NEXT_CHARACTER
	dot = min(len+1, dot+1)
      end_function_definition
1009                                              # PR_END_OF_LINE
	dot = len+1
      end_function_definition
1010                                              # PR_BEGINNING_OF_LINE
	dot = 1
      end_function_definition
1011                                              # PR_ADD_TEXT_BEFORE_CURSOR
	q_status = q_pr_add_text_before_cursor(st,len,dot)
      end_function_definition
1012                                              # PR_ABORT
	call ms_error("Aborted.")
	q_pr_read_prompt = false
	break
      end_function_definition
1013                                              # PR_SPECIAL_CHARACTER
	call ms_message3(pr,st,len,dot)
	c = get_tty_character()
	if (c == '@')
	  c = 0
	else if (c == 8%31)
	  call redraw
	else if (c >= '0' & c <= '9') {		# get octal value
	  n = 0
	  repeat {
	    c = n*8 + (c - '0')
	    n = c
	    q_status = q_pr_self_insert(st_buffer(st),len,dot,c)
	    call ms_message3(pr,st,len,dot)
	    if (q_status)
	      call pr_delete_previous_character(st_buffer(st),len,dot)
	    else
	      call ms_error(EOS)
	    c = get_tty_character()
	    } until (c < '0' | c > '9')
	  call pu_push_back_character(c)
	  c = n
	  }
	if (q_status)
	  q_status = q_pr_self_insert(st_buffer(st),len,dot,c)
	else
	  q_status = true
      end_function_definition
1014                                              # PR_CONTROL_Y
	call redraw
	q_status = q_pr_self_insert(st_buffer(st),len,dot,pu_last_key_struck)
	end_function_definition	#MAKEBIND isn't smart enough to put this at end
	}
  if (pusize != -1)
    bu_size(pu_buffer) = pusize
  mode = bi_use_keymap(mode)
  se_in_prompt = false
  if (q_pr_read_prompt & len > 0) {
    last_st_len = len
    call movc(st_buffer(st), last_st, len+1)
    }
  return
  end
  function q_pr_self_insert(buf,len,dot,char)
  header
  byte buf(ARB), char
  if (len+1 < MAX_PROMPT) {
    len = len+1
    call movc(buf(dot), buf(dot+1), len-dot)
    buf(len+1) = EOS
    buf(dot) = char
    dot = dot+1
    }
  else
    return(false)
  return(true)
  end
  function q_pr_add_text_before_cursor(st,len,dot)
  header
  bu = bu_find_by_name("Save")
  if (bu != null)
    if (len+bu_size(bu) < MAX_PROMPT) {
      n = bu_size(bu)
      call movc(st_buffer(st+dot-1), st_buffer(st+dot+n-1), len+1-dot)
      len = len + n
      st_buffer(st+len) = EOS
      call tx_copy_text_to_string(bu,1,n,st+dot-1)
      dot = dot + n
      }
    else
      return(false)
  return(true)
  end
  subroutine pr_delete_previous_character(buf,len,dot)
  header
  byte buf(ARB)
  if (dot > 1) {
    dot = dot - 1
    call movc(buf(dot+1), buf(dot), len-dot)
    buf(len) = EOS
    len = len - 1
    }
  return
  end
  subroutine pr_kill_to_beginning_of_line(buf,len,dot)
  header
  byte buf(ARB)
  if (dot > 1) {
    len = len + 1 - dot
    call movc(buf(dot), buf(1), len)
    buf(len+1) = EOS
    dot = 1
    }
  return
  end
  function q_pr_ask(q,defans,aborted)
  header
  byte q(ARB),ho_clower
  logical defans,aborted
  st = st_allocate(MAX_PROMPT)
  aborted = ! q_pr_read_prompt(q,st,len)
  q_pr_ask = (! aborted) & (ho_clower(st_buffer(st)) == 'y' |
				(defans & ho_clower(st_buffer(st)) != 'n'))
  call st_deallocate(st)
  return
  end
  # Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.
  # Change bindings and function definitions for standard Zilch
  # This file is %included by ZBIND.BND
  define(header,implicit integer (a-p,r-z); implicit logical (q)
    include "session.cmn"
    include "memory.cmn")
  define(unbound_key_sequence,
	break)
  define(qio_error,
	break)
  define(qio_error_in_insert_mode,		# can't happen here
	continue)
  define(control_y_interrupt,
	call redraw
	break)
  define(end_function_definition,
	next)
  subroutine query_replace_string(count)
  header
  logical do_all
  string help_
  "' 'change '!'change all '.'change&stop 'n'no change '='return here '^G'stop"
  st = st_allocate(MAX_PROMPT)
  if (q_sr_get_search_string("Old string? "))
    if (q_pr_read_prompt("New string? ",st,len)) {
      dot = wi_dot(se_current_window)
      bow = wi_bow(se_current_window)
      mode = bi_use_keymap(CHANGE_MODE)
      do_all = false
      for (n = 0; n < count | count == 1; ) {
	if (! q_tx_search_forward(se_current_buffer,
    				wi_dot(se_current_window),
    				bu_size(se_current_buffer),
    				st_buffer(se_search_string),
    				st_buffer(se_search_mask),
    				se_search_length,
    				wi_dot(se_current_window)))
	  break
	else {
	  wi_dot(se_current_window) = wi_dot(se_current_window) +
							se_search_length
	  if (count > 1 | do_all)
	    goto 20
  10	  call ms_message(help)
	  cmd = bi_get_command()
      goto (2001, 2002, 2003 _
       , 1001 _
       , 1002 _
       , 1003 _
       , 1004 _
       , 1005 _
       ), cmd
      unbound_key_sequence
      end_function_definition
2001  qio_error
      end_function_definition
2002  qio_error_in_insert_mode
      end_function_definition
2003  control_y_interrupt
      end_function_definition
1001                                              # SR_REPLACE
	  continue
  20	  call sr_replace(st_buffer(st),len)
	  n = n+1
      end_function_definition
1002                                              # SR_REPLACE_ALL
	  call sr_replace(st_buffer(st),len)
	  n = n+1
	  do_all = true
      end_function_definition
1003                                              # SR_NO_REPLACE
	  continue
      end_function_definition
1004                                              # SR_REPLACE_AND_STOP
	  call sr_replace(st_buffer(st),len)
	  n = n+1
	  break
      end_function_definition
1005                                              # SR_RETURN_HERE
	  dot = wi_dot(se_current_window)
	  bow = wi_bow(se_current_window)
	  goto 10
	  }
	}
      if (n > 0)
	call ms_report_number2("Replaced ",n," occurrence."," occurrences.")
      else
	call ms_message("No replacements done.")
      wi_dot(se_current_window) = dot
      wi_set_bow(se_current_window,bow)
      mode = bi_use_keymap(mode)
      }
  call st_deallocate(st)
  count = 0
  return
  end
