These notes should be considered an addition to the documentation
to be found in PSEUDO.DOC.  These notes document some enhancements
I have made to the drivers as well as some bugs I have found and not
been able to fix.  If you find more bugs or come up with a fix for
those mentioned here, PLEASE PLEASE PLEASE let me know ASAP!

First of all, I want to grant credit to the original authors of the
driver, they are listed at the beginning of the two source files.  In
private correspondence with Dale Moore at CMU, he has chosen to release the
driver to the public domain.  You should, therefore, feel free to go ahead
and use it.  There have been various incarnations of this driver in the
past.  I started with a version that was modified to run (just barely)
under VMS V4 and cleaned it up and made CONNECT/DISCONNECT and HANGUP work
consistently.  It's been tested on VMS V4 up through 4.2.

Load the two drivers as PYA0: and PTA0:.  Then, just assign a channel to
PYA0:, which will create a PYAn: and a PTAn: (the unit numbers just
go up).  Anything you write to that channel appears on the PT as if
typed at a terminal.  Any output to the terminal PTAn: is available to
be read from PYAn:.  The devices do flow control between one another
and all buffering.  So, you can just read, for example, with a 100
char buffer from PY and the read will complete with whatever number of
characters the QIO to the PT terminal had, anywhere from 1 to MAXBUF.
If the QIO to the PT had more chars than your read buffer, it'll just
fill the read buffer and return, and you can get the rest on the next
read.  It is very simple to use.

Also, if you assign a mailbox with the PYAn: device (use LIB$ASN_WTH_MBX
when assigning channel to PYA0:) you will get a MBX$_TRMHANGUP (or
something like that, see the VMS terminal driver doc in I/O User's
Guide) message in the mailbox whenever the terminal is hung-up.  Like
when a process logouts out of it or deassigns the last channel to the
device.  It works just like the HANGUP on terminals with modem signals.
You can even ignore the hangup message if you want, it only generates
the message in the mailbox, you can continue to use the device if you
choose after getting the message.

Should you deassign the PYAn: device, a DISCONNECT will be forced on
any process using the PTAn: device.  Just like dropping carrier on
a modem line.  If you have the TT2$M_DISCONNECT bit set in the
default terminal characteristics (TTY_DEFCHAR2 in SYSGEN), then you will
get a virtual terminal upon logging into a PTAn: device.  Then you
get CONNECT/DISCONNECT to work.  Really nice on network connections.

Note that, just as with normal VMS terminals, you will only get a
VTAn: if the line has the DISCONNECT terminal characteristic before
you log into it, and only if you use LOGINOUT to start a process on
the terminal.  Just sending a <CR> into the device as the first thing
will start up LOGINOUT just like a normal terminal.

There are currently two bugs in the drivers.  The first is very minor and
is actually a side-effect of the driver being cautious in order to prevent
possible problems.  If you have a virtual terminal associated with the
pseudo-terminal, and you deassign the last channel to the control device
(the PY device) then a DISCONNECT is forced on any process on the PT and
the PY and PT are both deleted.  In this case, the PT will not be deleted,
although the PY will and the PT will be marked as OFFLINE.  This is because
I rely on VMS to do the actual delete of the device and because the VT's
screw up the way device reference counts work, VMS never gets around to
deleting the device.  It is marked for delete, so anything you do (I like
SHOW TERM) will cause it to be zapped.  I could fix this by zapping the
device explicitly after forcing the DISCONNECT, however I am not convinced
that someone, somewhere, won't try to use the UCB and thus cause bad
things to occur.  Like I said, it's a bug because I'm possibly being too
careful.  Note that it DOES get deleted correctly if you do not have
a virtual terminal associated with the PT or if you have no processes
active on the PT when the PY and PT are to be deleted.

The second bug is nastier, though much rarer.  Sometimes, and I don't
know exactly when, a character may get munged that is being output to
the pseudo-terminal.  It appears to happen to the last <LF> after the
first output line after a noecho read, if the output line is a certain
length.  It also has been seen in other places, but that's the only one
I can reproduce semi-reliably.  The character is always changed into
the hex byte xC, where x is any nybble.  Thus, you get things like:
"l", "L", <FF>, ",", "<", etc...   I am working on this one, but it's
a bitch.  It seems to be more likely to occur during a small window
where there is no outstanding read on the master device, the PY.
Programs which do a lot of work between reads on the master device
are more likely to see this happen.

There are no known system-crashers or process killers.

Load the two drivers as PYA0: and PTA0:.  Then, just assign a channel to
PYA0:, which will create a PYAn: and a PTAn: (the unit numbers just
go up).  Anything you write to that channel appears on the PT as if
typed at a terminal.  Any output to the terminal PTAn: is available to
be read from PYAn:.  The devices do flow control between one another
and all buffering.  So, you can just read, for example, with a 100
char buffer from PY and the read will complete with whatever number of
characters the QIO to the PT terminal had, anywhere from 1 to MAXBUF.
If the QIO to the PT had more chars than your read buffer, it'll just
fill the read buffer and return, and you can get the rest on the next
read.  It is very simple to use.

Also, if you assign a mailbox with the PYAn: device (use LIB$ASN_WTH_MBX
when assigning channel to PYA0:) you will get a MBX$_TRMHANGUP (or
something like that, see the VMS terminal driver doc in I/O User's
Guide) message in the mailbox whenever the terminal is hung-up.  Like
when a process logouts out of it or deassigns the last channel to the
device.  It works just like the HANGUP on terminals with modem signals.
You can even ignore the hangup message if you want, it only generates
the message in the mailbox, you can continue to use the device if you
choose after getting the message.

Should you deassign the PYAn: device, a DISCONNECT will be forced on
any process using the PTAn: device.  Just like dropping carrier on
a modem line.  If you have the TT2$M_DISCONNECT bit set in the
default terminal characteristics (TTY_DEFCHAR2 in SYSGEN), then you will
get a virtual terminal upon logging into a PTAn: device.  Then you
get CONNECT/DISCONNECT to work.  Really nice on network connections.

Note that, just as with normal VMS terminals, you will only get a
VTAn: if the line has the DISCONNECT terminal characteristic before
you log into it, and only if you use LOGINOUT to start a process on
the terminal.  Just sending a <CR> into the device as the first thing
will start up LOGINOUT just like a normal terminal.

There are currently two bugs in the drivers.  The first is very minor and
is actually a side-effect of the driver being cautious in order to prevent
possible problems.  If you have a virtual terminal associated with the
pseudo-terminal, and you deassign the last channel to the control device
(the PY device) then a DISCONNECT is forced on any process on the PT and
the PY and PT are both deleted.  In this case, the PT will not be deleted,
although the PY will and the PT will be marked as OFFLINE.  This is because
I rely on VMS to do the actual delete of the device and because the VT's
screw up the way device reference counts work, VMS never gets around to
deleting the device.  It is marked for delete, so anything you do (I like
SHOW TERM) will cause it to be zapped.  I could fix this by zapping the
device explicitly after forcing the DISCONNECT, however I am not convinced
that someone, somewhere, won't try to use the UCB and thus cause bad
things to occur.  Like I said, it's a bug because I'm possibly being too
careful.  Note that it DOES get deleted correctly if you do not have
a virtual terminal associated with the PT or if you have no processes
active on the PT when the PY and PT are to be deleted.

The second bug is nastier, though much rarer.  Sometimes, and I don't
know exactly when, a character may get munged that is being output to
the pseudo-terminal.  It appears to happen to the last <LF> after the
first output line after a noecho read, if the output line is a certain
length.  It also has been seen in other places, but that's the only one
I can reproduce semi-reliably.  The character is always changed into
the hex byte xC, where x is any nybble.  Thus, you get things like:
"l", "L", <FF>, ",", "<", etc...   I am working on this one, but it's
a bitch.  It seems to be more likely to occur during a small window
where there is no outstanding read on the master device, the PY.
Programs which do a lot of work between reads on the master device
are more likely to see this happen.

There are no known system-crashers or process killers.

I am currently considering a few enhancements.  It should be possible
to set the PT terminal characteristics through the PY device, so the
controlling program can set them.  I will probably implement this by
letting you do an IO$_SETMODE to the PY device.  Also, I should make the
PT device driver notify the controlling program (via the associated
mailbox) whenever the PT terminal characteristics are changed (but not
when changed by the PY device driver!) in case you need to know such
things in your applications.  I need to think about the ramifications
of changing device characteristics on TTDRIVER unexpectedly, however,
before I make these changes.

If you need to set characteristics of the terminal device right now,
you must assign a channel to the PT device and use a SETMODE QIO
then deassign the channel before using the PT device for real.  You
will get a HANGUP message in the associated mailbox when you
deassign if the HANGUP attribute was set on the device.  You can just
ignore this message, however, and go ahead and use the device.  This
is true in all cases of a HANGUP.  You are free to ignore the hangup
and continue using the PT should you so desire.

You cannot set characteristics of the master device.  This used to be
allowed, though it had no purpose, and it crashes the system (at
least under V4).

	/Kevin Carosso               engvax!kvc @ CIT-VAX.ARPA
	 Hughes Aircraft Co.

	 September 16, 1985
