define(VAX)
  implicit integer (a-z)
  byte buf(75)
  data handle /0/
  include [-]syscodes.sym
  include [-]terminal.cmn

  call ti_initialize
  no = 1
  do i = 1, 20 {
    call ti_in_type_ahead(buf(i),count)
    if (count == 0) {
      j = sys$qio(%val(1), %val(ti_channel), %val(ti_in_character_iofc),
	    iosb, , , buf(i), %val(1), , , , )
      if (iosb_status == 0) {
	}
      call sys$waitfr(%val(1))
      }
    nin = i
    if (buf(i) == 8%15)
      break
    }
  call ti_outch(buf(no),nin-no)
  call ti_flush
  write(6,(/))
  call wait(200)
  no = 1
  look = 1
  call lib$init_timer(handle)
  do i = 1, 75 {
    if (look == 0)
      goto 10
    call ti_in_type_ahead(buf(i),count)
    if (count == 0) {
      look = 0
10    j = sys$qio(%val(1), %val(ti_channel), %val(ti_in_character_iofc),
	    iosb, , , buf(i), %val(1), , , , )
      if (iosb_status == 0) {
	call ti_outch(buf(no),i-no)
	call ti_flush
	no = i
	}
      if (iosb_status ^= 0)
	look = 1
      else
	call sys$waitfr(%val(1))
      }
    nin = i
    if (buf(i) == 8%15)
      break
    }
  call ti_outch(buf(no),nin-no)
  call ti_flush
  call lib$show_timer(handle,0)
  write(6,(' Qio (look) ^'/))
  no = 1
  call lib$init_timer(handle)
  do i = 1, 75 {
    j = sys$qio(%val(1), %val(ti_channel), %val(ti_in_character_iofc),
	  iosb, , , buf(i), %val(1), , , , )
    if (iosb_status == 0) {
      call ti_outch(buf(no),i-no)
      call ti_flush
      no = i
      }
    call sys$waitfr(%val(1))
    nin = i
    if (buf(i) == 8%15)
      break
    }
  call ti_outch(buf(no),nin-no)
  call ti_flush
  call lib$show_timer(handle,0)
  write(6,(' Qio (nolook) ^'/))
  no = 1
  call lib$init_timer(handle)
  do i = 1, 75 {
    call ti_in_type_ahead(buf(i),count)
    if (count == 0) {
      call ti_outch(buf(no),i-no)
      call ti_flush
      no = i
      j = sys$qiow(%val(1), %val(ti_channel), %val(ti_in_character_iofc),
	    , , , buf(i), %val(1), , , , )
      }
    nin = i
    if (buf(i) == 8%15)
      break
    }
  call ti_outch(buf(no),nin-no)
  call ti_flush
  call lib$show_timer(handle,0)
  write(6,(' Qiow ^'/))
  no = 1
  look = 1
  call lib$init_timer(handle)
  do i = 1, 75 {
    if (look == 0)
      goto 20
    call ti_in_type_ahead(buf(i),count)
    if (count == 0) {
      look = 0
20    j = sys$qio(%val(1), %val(ti_channel), %val(ti_in_character_iofc),
	    iosb, , , buf(i), %val(1), , , , )
      if (iosb_status == 0) {
	call ti_outch(buf(no),i-no)
	call ti_flush
	no = i
	}
      if (iosb_status ^= 0)
	look = 1
      else
	call sys$waitfr(%val(1))
      }
    nin = i
    if (buf(i) == 8%15)
      break
    }
  call ti_outch(buf(no),nin-no)
  call ti_flush
  call lib$show_timer(handle,0)
  write(6,(' Qio (look) ^'/))
  end
#	Zilch Screen Editor, Copyright (c) 1982,1983,1984 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "[-]terminal.cmn"
  include "[-]syscodes.sym")

  subroutine ti_in_type_ahead(input,count)
  header
  byte input
#
#	call ti_in_type_ahead(input,count)
#	input	<== byte variable to accept input
#	count	<== number of characters read.
#

  call sys$qiow( , %val(ti_channel), %val(ti_in_type_ahead_iofc),
		iosb, , , input, %val(1), %val(0), , , )
  count = trm_offset + trm_size
  return
  end
  subroutine wait(n)
  integer*4 delta(2)
  data delta/-1, -1/

  delta(1) = - n * 100 000		# wait in 100ths of seconds
  call sys$setimr(%val(0), delta, ,)
  call sys$waitfr(%val(0))
  return
  end
