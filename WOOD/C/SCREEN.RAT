/*	Zilch Screen Editor,
 *	Copyright (c) 1982,1986,1987 William P. Wood, Jr. */

#include "symbols.h"
#include "session.cmn"
#include "screen.cmn"
#include "memory.cmn"
#include "terminal.cmn"

void sc_initialize(void)
{

  sc_size = min(ti_length, SCREEN_SIZE);
  sc_width = ti_width;
  sc_error_occurred = false;
  for (i = 1; i <= SCREEN_SIZE; i++) {
    sc_new_length(i) = 0;
    sc_reverse_video(i,sc_old) = false;
    sc_reverse_video(i,sc_new) = false;
    }
  redraw();
  return
}

void sc_fill_line(n,txt,len)
{
  byte txt(ARB);

  sc_modified(n) = true;
  sc_new_length(n) = min(len,sc_width);
  if (len > 0) {
    movc(txt,sc_buffer(1,n,sc_new),sc_new_length(n));
    if (len >= sc_width)
      sc_buffer(sc_width,n,sc_new) = '$';
    }
  return
}

void sc_add_to_line(int n, const char *txt, int len)
{
  byte txt(ARB);

  sc_modified(n) = true;
  l = min(len, sc_width - sc_new_length(n));
  if (l > 0) {
    movc(txt,sc_buffer(sc_new_length(n)+1,n,sc_new),l);
    sc_new_length(n) = sc_new_length(n) + l;
    if (sc_new_length(n) >= sc_width)
      sc_buffer(sc_width,n,sc_new) = '$';
    }
  return
}

void redraw(void)
{

  sc_redraw = true;
  return
}

void sc_fill_new(void)
{
  int seedot;
  static const char blanks54[54] =
		    "                                                      ";

  n = 1;
  wi_map(se_windows,wi) {
    seedot = true;
    if (wi_modified(wi) == 0)
      if (! q_sc_find_cursor(wi,n)) {
	seedot = false;
	wi_modified(wi) = 1;
	}
    if (wi_modified(wi) == 0)
      n = n + wi_size(wi);
    else {
      sc_fill_window(wi,n,seedot,sc_buffer(0,1,sc_new));
      n = n + wi_size(wi);
      sc_new_length(n) = 0;
      sc_modified(n) = true;
      if (wi_mode_line(wi) == null)
	sc_reverse_video(n,sc_new) = false;
      else {
	if (te_rv)
	  sc_reverse_video(n,sc_new) = true;
	else {
	  sc_reverse_video(n,sc_new) = false;
	  sc_fill_line(n,blanks54,54);
	  }
	sc_add_to_line(n,
	    st_buffer(wi_mode_line(wi)),
	    ho_length(st_buffer(wi_mode_line(wi))));
	}
      }
    n = n+1;
    wi_modified(wi) = 0;
    }
  return
}


#define addchar(c) {		\
    if (nc < sc_width) {	\
      nc = nc+1			\
      buffer(nc,i) = c		\
      }				\
    }

/* inline coding of tx_address */
#define nextc(tx, c) {				\
	      if (tx >= gap)			\
		c = tx_text(tx + gapsiz)	\
	      else				\
		c = tx_text(tx)}

#define nextc_inc(tx, c) {			\
	      if (tx >= gap)			\
		c = tx_text((tx++) + gapsiz)	\
	      else				\
		c = tx_text(tx++)}

void sc_fill_window(wi, n, seedot, buffer)
{
  byte char, buffer(0:SCREEN_WIDTH,_incr(SCREEN_SIZE));
  int seedot;

  bu = wi_buffer(wi);
  base = bu_base(bu);
  gap = bu_gap(bu);
  gapsiz = bu_gap_size(bu);
  dot = base + wi_dot(wi);
  do {
    if (! seedot) {
      tx = base + wi_dot(wi);
      for (i = (wi_size(wi)-1)/2; i >= 0 && tx > base; i = i-1)
	for (tx = tx-1; tx > base; tx = tx-1) {
	  nextc(tx,char);
	  if (char == NEWLINE)
	    break;
	  }
      wi_bow(wi) = tx+1-base;
      }
    seedot = false;
    tx = base + wi_bow(wi);
    for (i = n; i <= n+wi_size(wi)-1; i++) {
      sc_reverse_video(i,sc_new) = false;
      sc_modified(i) = true;
      nc = 0;
      for ( ; ; ) {
	if (tx == dot) {
	  seedot = true;
	  if (wi == se_current_window && ! se_in_prompt) {
	    sc_cursor_x = min(sc_width,nc+1);
	    sc_cursor_y = i;
	    }
	  }
	nextc_inc(tx,char);
	if (char >= ' ' && char <= '~') {
	  addchar(char);
	  }
	else if (char == NEWLINE) {
	  break;
	  }
	else if (char == TAB) {
	  for (j = min(nc + 8 - mod(nc, 8), sc_width); nc < j; )
	    addchar(' ');
	  }
	else if (char >= 0 && char <= 037) {
	  addchar('^');
	  addchar(char+0100);
	  }
	else {
	  addchar('\');
	  ichar = char;
	  addchar('0' + (ichar & 0300)/0100);
	  addchar('0' + (ichar & 070)/010);
	  addchar('0' + (ichar & 07));
	  }
	}
      if (nc == sc_width)
	buffer(nc,i) = '$';
      sc_new_length(i) = nc;
      }
    } while (! seedot);
  return
}

int q_sc_dot_is_visible(wi,bu)
{
  char c;

  if (wi_bow(wi) > wi_dot(wi))
    return false;
  else {
    dot = bu_base(bu) + wi_dot(wi);
    tx = bu_base(bu) + wi_bow(wi);
    for (i = 1; i <= wi_size(wi); i++) {
      tx_find_newline(tx,bu_gap(bu),bu_gap_size(bu),&tx_text(0));
      if (dot < tx)
	return true;
      }
    return false;
    }
}

int q_sc_find_cursor(wi,n)
{
  char c;

  if (wi_bow(wi) > wi_dot(wi))
    return false;
  else {
    bu = wi_buffer(wi);
    base = bu_base(bu);
    gap = bu_gap(bu);
    gapsiz = bu_gap_size(bu);
    dot = base + wi_dot(wi);
    tx = base + wi_bow(wi);
    for (i = n; i <= n+wi_size(wi)-1; i++) {
      bl = tx;
      tx_find_newline(tx,gap,gapsiz,&tx_text(0));
      if (dot < tx) {				/* find cursor */
	if (wi == se_current_window && ! se_in_prompt) {
	  sc_cursor_y = i;
	  sc_cursor_x = 0;
	  for (tx = bl; tx < dot; ) {
	    nextc_inc(tx,c);
	    if (c >= ' ' && c <= '~')
	      sc_cursor_x = sc_cursor_x+1;
	    else if (c == TAB)
	      sc_cursor_x = sc_cursor_x+8-mod(sc_cursor_x,8);
	    else if (c >= 0 && c <= 037)
	      sc_cursor_x = sc_cursor_x+2;
	    else
	      sc_cursor_x = sc_cursor_x+4;
	    }
	  sc_cursor_x = min(sc_cursor_x + 1,sc_width);
	  }
	return true;
	}
      }
    return false;
    }
}
