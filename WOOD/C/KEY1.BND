  # Zilch Screen Editor
  #   Copyright (c) 1982,1983,1984,1986,1987,1988 William P. Wood, Jr.
  # Keyboard bindings and function definitions for standard Zilch
  # This file is %included by KEY.BND
  # It contains all the standard Zilch functions.  New functions may be added
  # as follows:
  #	%include key1.bnd
  #	%include NEWFUNCS.bnd
  #	%include key2.bnd

%mode					control		# {control,insert,0-9}
  # Begin initial code
  define(header,implicit integer (a-p,r-z); implicit logical (q)
    include "session.cmn"
    include "bind.cmn"
    include "pushb.cmn"
    include "memory.cmn")

  define(unbound_key_sequence,
      if (cmd < 1000)
	call ms_error(EOS)
      else if (cmd < 2000)
	call ky_macro(cmd-1000)
      else if (cmd < 3000) {
	hugcol = abs(hugcol)
	call ma_invoke(cmd-1999)
	}
      else if (cmd < 4000) {
	call ma_replace(cmd-2999)
	call ms_report_number("Renamed macro 0 to macro ",cmd-3000,EOS)
	}
      else if (cmd < 5000) {
	call bi_use_keymap(cmd-4000)
	call ms_report_number("Mode ",cmd-4000,EOS)
	}
      else
	call ms_error(EOS))
  define(qio_error, if (q_fi_write_modif_file_buffers()) exit)
  define(qio_error_in_insert_mode, se_count = 1; call in_exit)
  define(control_y_interrupt, call redraw)
  define(end_function_definition,next)
  define(exit,goto (10,20), exitla)

    subroutine ky_edit
    header
    byte c, c2, find_next_character
    save checkpoint_frequency
    data checkpoint_frequency /400/

    st = st_allocate(MAX_PROMPT)
    exitla = 1
    hugcol = 0
    call pa_ready(se_current_page)
  20
    if (exitla == 2) {
      exitla = 1
      call pa_switch(pa_number(paold))
      }
    repeat {
      if (bu_size(pu_buffer) == 0) {
	se_command_count = se_command_count+1
	if (se_command_count >= checkpoint_frequency)
	  if (pu_last_key_struck != RUBOUT) {
	    call checkpoint_modified_files
	    se_command_count = 0
	    }
	}
      cmd = bi_get_command()
      se_count = 2
      while (se_count > 1 && ! se_error_occurred) {
	se_count = se_count - 1
	hugcol = - max(0,hugcol)
  # End initial code

repeat_count				0-9
	hugcol = abs(hugcol)
	call ky_repeat_count(se_count,cmd)
redraw					r
	call redraw
exit					^M		# Carriage return
	exit
write_all_modified_files_and_exit	^Z
	if (q_fi_write_modif_file_buffers())
	  exit
write_all_modified_files		wa
	call q_fi_write_modif_file_buffers
write_current_buffer			^T
	call q_fi_write_buffer(se_current_buffer)
write_named_file			ww
	call q_fi_write_named_file(se_current_buffer)
read_named_file				wr
	call q_fi_read_named_file(se_current_buffer,0)
insert_named_file			wi
	call q_fi_read_named_file(se_current_buffer,wi_dot(se_current_window))
goto_beginning_of_file			t
	call beginning_of_file
goto_last_lines_of_file			e
	call goto_last_lines_of_file
previous_character			h
	call previous_character
next_character				l
	call next_character
previous_line				k
	call scroll_previous_line
next_line				j
	call scroll_next_line
previous_line_and_hug_column		i
	hugcol = abs(hugcol)
	call scroll_previous_line_col(hugcol)
next_line_and_hug_column		u
	hugcol = abs(hugcol)
	call scroll_next_line_col(hugcol)
scroll_one_line_down			^K
	call scroll_one_line_down
	if (! q_dot_is_visible())
	  call previous_line
scroll_one_line_up			^J
	call scroll_one_line_up
	if (! q_dot_is_visible())
	  call next_line
previous_half_screen			g
	call previous_half_screen
next_half_screen			b
	call next_half_screen
previous_screen				y
	call previous_screen
next_screen				n
	call next_screen
previous_word				o
	call previous_word
next_word				p
	call next_word
previous_section			f
	call mp_previous_procedure
next_section				v
	call mp_next_procedure
ends_of_line				m
	call ends_of_line
kill_through_end_of_line		^U
	call kill_through_end_of_line
add_kill_after_cursor			^R
	call yank_kill
set_mark1				<
	call mk_set_mark(bu_mark1_ptr(se_current_buffer),
		wi_dot(se_current_window),se_current_buffer)
	call ms_message("Mark 1 set.")
set_mark2				>
	call mk_set_mark(bu_mark2_ptr(se_current_buffer),
		wi_dot(se_current_window),se_current_buffer)
	call ms_message("Mark 2 set.")
set_mark1				,
set_mark2				.
change_case				x\^
	call case_change
write_text				^P
	call write_text
save_text				s
	call save_text
extract_text				^E
	call extract_text
delete_text				^D
	call delete_text
add_text_after_cursor			^A
	call add_text_after_cursor
save_location				=
	call save_location
exchange_dot_and_save_location		*
	call exchange_dot_and_save_location
goto_save_location			\^
	call goto_save_location
get_current_indent			^I		# Tab
	call set_indent(current_indent())
indent_line				^B
	call do_indent(se_indent)
exdent_line				^V
	call do_indent(-se_indent)
switch_to_page				\#
	if (q_pr_read_prompt("Page number? ",st,len)) {
	  i = 1
	  call switch_to_page(ho_ctoi(st_buffer(st),i))
	  }
previous_page				\-
	call pa_previous_page
next_page				+
	call pa_next_page
list_buffers				wl
	if (exitla == 1) {
	  paold = se_current_page
	  if (q_buffer_list())
	    exitla = 2
	  }
	else
	  call ms_error("Can't enter Buffer list!")
fill_window				wf
	call wi_fill
equalize_window				wq
	call wi_equalize
visit_file				wv
	if (q_pr_read_prompt("Visit file: ",st,len))
	  call multi_visit_file(st_buffer(st),false,true)
	call pa_ready(se_current_page)
change_file				wc
	if (q_pr_read_prompt("Change to file: ",st,len))
	  call multi_visit_file(st_buffer(st),true,true)
	call pa_ready(se_current_page)
change_buffer				wx
	if (q_pr_read_prompt("Change to buffer: ",st,len))
	  call q_switch_to_buffer(null, st_buffer(st))
	call bu_ready(se_current_buffer)
	call wi_ready(se_current_window)
visit_buffer				wb
	if (q_pr_read_prompt("Visit buffer: ",st,len))
	  call q_pop_to_buffer(null, st_buffer(st))
	call bu_ready(se_current_buffer)
	call wi_ready(se_current_window)
enlarge_window				we
	if (! q_enlarge_window())
	  call ms_message("Can't enlarge window!")
shrink_window				ws
	if (! q_shrink_window())
	  call ms_message("Can't shrink window!")
set_minimum_pushed_size_of_window	w\#
	wi_min_size(se_current_window) = wi_size(se_current_window)
	call ms_report_number2("Window size will not be pushed below ",
	  wi_min_size(se_current_window), " line.", " lines.")
split_window				wh
	if (! q_split_current_window())
	  call ms_error("Can't split window!")
previous_window				wp
	call previous_window
next_window				wn
	call next_window
delete_window				wd
	if (! q_delete_window())
	  call ms_error("Can't delete window!")
delete_other_windows			wo
	call delete_other_windows
delete_next_window					/* not bound */
	if (wi_next(se_current_window) != NULL) {
	  call next_window
	  call q_delete_window
	  }
beginning_of_window			wt
	call beginning_of_window
toggle_buffer_case			w\^
	call bu_switch_case
change_mappings				wm
	call mp_change_mappings
start_remembering			[
	hugcol = abs(hugcol)
	call ma_begin
stop_remembering			]
	hugcol = abs(hugcol)
	call ma_end
	se_count = se_count + 1
	cmd = bi_get_command()
write_macros				xw
	if (q_pr_read_prompt("Write macros to file (<CR> for default): ",st,
									len)) {
	  if (len == 0)
	    call st_scopy(se_macros, st)
	  if (! q_ma_write_macros(st_buffer(st))) {
	    call ms_message2("Can't write ",st)
	    call ms_error(EOS)
	    }
	  else {
	    call ms_message2("Wrote macros to ",st)
	    if (len != 0)
	      call ed_save_string(st, se_macros)
	    }
	  }
read_macros				xg
	if (q_pr_read_prompt("Get macros from file (<CR> for default): ",st,
									len)) {
	  if (len == 0)
	    call st_scopy(se_macros, st)
	  if (! q_ma_read_macros(st_buffer(st))) {
	    call ms_message2("Can't read ",st)
	    call ms_error(EOS)
	    }
	  else {
	    call ms_message2("Read macros from ",st)
	    if (len != 0)
	      call ed_save_string(st, se_macros)
	    }
	  }
udk_0 					xm
udk_0 					x0
udk_replace_0				xr0
udk_1 					x1
udk_replace_1				xr1
udk_2 					x2
udk_replace_2				xr2
udk_3 					x3
udk_replace_3				xr3
udk_4 					x4
udk_replace_4				xr4
udk_5 					x5
udk_replace_5				xr5
udk_6 					x6
udk_replace_6				xr6
udk_7 					x7
udk_replace_7				xr7
udk_8 					x8
udk_replace_8				xr8
udk_9 					x9
udk_replace_9				xr9
search_forward				/
	call q_search_forward(se_count)
search_reverse				\\
	call q_search_reverse(se_count)
query_replace_string			c
	call query_replace_string(se_count)
enter_dcl				dcl
	call dcl_call
execute_dcl_command			xdcl
	call dcl_xcall
help					?
	if (exitla == 1) {
	  paold = se_current_page
	  if (q_he_help())
	    exitla = 2
	  }
	else
	  call ms_error("Can't enter Help!")
display_buffer_size			x\#
	call up_display_buffer_size
enter_calc_mode				xc
	call calc
checkpoint_modified_files		!
	if (se_count > 1) {
	  checkpoint_frequency = se_count
	  se_count = 1
	  call ms_report_number("A checkpoint will occur after every ",
	  	checkpoint_frequency, " commands.")
	  }
	else {
	  call ms_message("Checkpointed 0 files.")
	  call checkpoint_modified_files
	  se_command_count = 0
	  }
display_window_status			%
	call wi_status(se_current_window)
delete_and_enter_insert_mode		\177		# Rubout
	for ( ; se_count > 0; se_count = se_count - 1)
	  if (se_cross_lines)
	    call delete_previous_character
	  else if (! q_bol())
	    call delete_previous_character
	call in_enter
delete_white_space			^F
	se_count = 1
	call delete_white_space
	call in_enter
enter_insert_mode			^[		# Escape
	se_count = 1
	call in_enter
macro_x					\40		# Space
	^[\40						# Enter insert, space
enter_overstrike_mode			~
	se_count = 1
	st2 = st_allocate(st_length(wi_mode_line(se_current_window)) + 5)
	call ho_scopy('<O> ', 1, st_buffer(st2), 1)
	call st_scopy(wi_mode_line(se_current_window), st2+4)
	wi_mode_line(se_current_window) = st2
	wi_modified(se_current_window) = 1
	call bi_use_keymap(OVERSTRIKE_MODE)

%mode					insert
in_self_insert				\ -~
	call in_self_insert
in_newline				^M		# Carriage return
	call in_carriage_return
kill_to_beginning_of_line		^U
	call kill_to_beginning_of_line
add_kill_before_cursor			^R
	call yank_buffer("kill")
add_text_before_cursor			^A
	call add_text_before_cursor
in_delete_previous_character		\177		# Rubout
	call in_delete_previous_character
in_delete_white_space			^F
	call in_post_inserted_text
	call delete_white_space
	call in_reenter
in_previous_character			^H
	call in_post_inserted_text
	call previous_character
	call in_reenter
in_next_character			^L
	call in_post_inserted_text
	call next_character
	call in_reenter
in_previous_line			^K
	call in_post_inserted_text
	call scroll_previous_line
	call in_reenter
in_next_line				^J
	call in_post_inserted_text
	call scroll_next_line
	call in_reenter
in_previous_word			^T
	call in_post_inserted_text
	call previous_word
	call in_reenter
in_next_word				^P
	call in_post_inserted_text
	call next_word
	call in_reenter
tab_to_indent				^I		# Tab
	if (current_column() < bu_indent(se_current_buffer))
	  call tab_to_column(bu_indent(se_current_buffer))
	else
	  call insert_character(TAB)
set_indent_at_current_column		^D
	call set_indent(current_column())
in_increase_indent			^E
	call in_increase_indent
in_decrease_indent			^W
	call in_decrease_indent
exit_insert_mode			^[		# Escape
	se_count = 1
	if (q_bi_in_mode(INSERT_MODE))
	  call in_escape
exit_insert_mode_without_popping_mappings	^Z
	se_count = 1
	if (q_bi_in_mode(INSERT_MODE))
	  call in_exit
get_mapping				\\
	call mp_get_mapping
stop_remembering			^]

%mode					overstrike
overstrike				\ -~
	c = pu_last_key_struck
	if (bu_case(se_current_buffer) == 1)
	  if (pu_last_key_struck >= 'a' && pu_last_key_struck <= 'z')
	    c = pu_last_key_struck - 8%40
	c2 = find_next_character()
	if (c2 != NEWLINE)
	  if (c2 != TAB)
	    call delete_next_character
	  else if (mod(current_column(), 8) == 0)
	    call delete_next_character
	call insert_character(c)
overstrike				\\\0-\177
newline					^M		# Carriage-return
	call insert_character(NEWLINE)
overstrike_tab				^I		# TAB
	dot = wi_dot(se_current_window)
	curcol = current_column() - 1
	call goto_column(curcol+8-mod(curcol,8) + 1)
	call delete_region(dot, wi_dot(se_current_window))
	call insert_character(TAB)
delete_previous_character		\177		# Rubout
	if (se_cross_lines)
	  call delete_previous_character
	else if (! q_bol())
	  call delete_previous_character
next_character				^L
previous_character			^H
next_line_and_hug_column		^J
previous_line_and_hug_column		^K
exit_overstrike_mode			^[		# Escape
	se_count = 1
	if (q_bi_in_mode(OVERSTRIKE_MODE)) {
	  call st_deallocate(wi_mode_line(se_current_window))
	  wi_mode_line(se_current_window) = bu_name(se_current_buffer)
	  wi_modified(se_current_window) = 1
	  call bi_use_keymap(CONTROL_MODE)
	  }
exit_overstrike_mode			^Z
stop_remembering			^]

%mode					control
self_insert						# not bound
	c = pu_last_key_struck
	if (bu_case(se_current_buffer) == 1)
	  if (pu_last_key_struck >= 'a' && pu_last_key_struck <= 'z')
	    c = pu_last_key_struck - 8%40
	call insert_character(c)
open_line						# not bound
	call insert_character(NEWLINE)
	call previous_character
delete_next_character					# not bound
	if (se_cross_lines)
	  call delete_next_character
	else if (! q_eol())
	  call delete_next_character
kill_to_end_of_line					# not bound
	call kill_to_end_of_line
goto_end_of_file					# not bound
	call goto_end_of_file
beginning_of_line					# not bound
	call beginning_of_line
end_of_line						# not bound
	call end_of_line
increment_page						# not bound
	call switch_to_page(pa_number(se_current_page) + 1)
message							# not bound
	if (q_pr_read_prompt("Message? ",st,len))
	  call ms_user_message(st_buffer(st), len)
illegal_operation					# not bound
	call ms_error(EOS)
null_operation						# not bound
	continue
