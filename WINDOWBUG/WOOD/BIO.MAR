	.title	icr_gp_open_create
;
; Function to do a Fortran useropen for "old" files for blockio.
;
;	status = icr_gp_open(fab, rab, unit)
;
; inputs:
;	fab is the fab
;	rab is the rab
;	unit is the unit number
;
; outputs:
;	status - standard VAX/VMS status code
;	ebk (in finfo common) - end of file block or, occasionally,
;				when ebk information is unavailable,
;				number of blocks allocated to file
;
	$xabfhcdef
	$xabrdtdef
	.psect	gp	pic,usr,ovr,rel,gbl,shr,noexe,rd,wrt,novec,long
nunits=100
rabs:	.blkl	nunits			; array maps units to rab addresses
;
	.psect	finfo	pic,usr,ovr,rel,gbl,shr,noexe,rd,wrt,novec,long
ebk:
	.long	0			; end-of-file block
	.align	long
fhcxab:
	$xabfhc				; file header characteristics xab
	.align	long
rdtxab:
	$xabrdt				; revision date and time xab
;
	.psect	icr_code,pic,usr,con,rel,lcl,shr,exe,rd,nowrt,novec,long
fab=4					; offset for fab address
rab=8					; offset for rab address
unit=12					; offset from ap for unit address
;
icr_gp_open::
gpopen::
	.word	^m<r2,r3>
	movl	fab(ap),r3		; fab address
	moval	fhcxab,r2
	bsbw	link_xab		; link in fhcxab
	moval	rdtxab,r2
	bsbw	link_xab		; link in rdtxab
	bisl2	#fab$m_bio,fab$b_fac(r3) ; set block i/o mode
	$open	fab=r3			; open the file
	blbc	r0,error		; low bit clear => error
connect:
	movb	#xab$c_fhc,r2
	bsbw	find_xab		; get fhcxab address
	beql	5$			; use alq if fhcxab absent
	movl	xab$l_ebk(r0),ebk	; get eof-block #
	bneq	10$			; use it if not 0
5$:
	movl	fab$l_alq(r3),ebk	; else use alq (cause of decnet files)
10$:
	movl	rab(ap),r2		; rab address
	bisl2	#rab$m_bio,rab$l_rop(r2) ; set block i/o mode
	$connect rab=@rab(ap)		; connect the rab
	blbc	r0,error		; low bit clear => error
	movl	@unit(ap),r2		; get unit
	movl	rab(ap),rabs[r2]	; set rab address for this unit
error:
	moval	rdtxab,r2
	bsbb	unlink_xab		; unlink rdtxab
	moval	fhcxab,r2
	bsbb	unlink_xab		; unlink fhcxab
	ret

;
; Function to do a Fortran useropen for "new", "unknown", or
;	"scratch" files for get and put.
;
;	status = icr_gp_create(fab, rab, unit)
;
; inputs:
;	fab is the fab
;	rab is the rab
;	unit is the unit number
;
; outputs:
;	status - standard VAX/VMS status code
;
fab=4					; offset for fab address
rab=8					; offset for rab address
unit=12					; offset from ap for unit address
;
icr_gp_create::
gpcre8::
	.word	^m<r2,r3>
	movl	fab(ap),r3		; fab address
	bisl2	#fab$m_bio,fab$b_fac(r3) ; set block i/o mode
	$create	fab=r3			; open the file
	blbc	r0,error		; low bit clear => error
  	brw	connect			; go connect the rab

;
;  Subroutine to link a xab into the xab list of a fab if a
;  xab of same type is not already present in the xab list.
;
;  Inputs:
;	r2 - address of xab
;	r3 - address of fab
;
;  Ouputs:
;	r0 - address of linked or found xab
;	r1 - junked
;	r2 - junked
;
link_xab:
	movl	r2,r1
	movb	xab$b_cod(r1),r2	; get type of this xab
	bsbb	find_xab		; see if similar xab already present
	bneq	10$			; found one, return it's address
	movl	fab$l_xab(r3),xab$l_nxt(r1) ; link in the xab
	movl	r1,fab$l_xab(r3)
	movl	r1,r0			; return address of linked xab in r0
10$:
	rsb

;
;  Subroutine to unlink a xab from the front of a fab's xab list
;  if the xab is there
;
;  Inputs:
;	r2 - address of xab
;	r3 - address of fab
;
;  Ouputs:
;	none
;
unlink_xab:
	cmpl	r2,fab$l_xab(r3)	; xab at front of list?
	bneq	10$			; no, return
	movl	xab$l_nxt(r2),fab$l_xab(r3) ; unlink the xab
10$:
	rsb

;
;  Subroutine to find a particular type of xab in the xab list of a fab
;
;  Inputs:
;	r2 - type of xab
;	r3 - address of fab
;
;  Ouputs:
;	r0 - address of found xab, zero if not found
;	condition codes - set by TESTL R0 to detect if r0 is zero or
;				contains an address
;
find_xab:
	movl	fab$l_xab(r3),r0	; get first xab
	beql	20$			; didn't find xab - return
10$:
	cmpb	r2,xab$b_cod(r0)	; is desired xab type?
	beql	20$			; yes
	movl	xab$l_nxt(r0),r0	; get next xab
	bneq	10$			; branch to check next xab
20$:
	tstl	r0			; set condition codes
	rsb

;
; Function to read blocks from an RMS file.
;
;	status = bget(unit, buffer, size, len, blknum)
;
; inputs:
;	unit is the unit number
;	size is the size of the buffer
;	blknum is the number of the block to begin reading at
;
; outputs:
;	status - standard VAX/VMS status code
;	buffer - a byte buffer to receive the blocks
;	len - the returned length of the buffer or a negative error code
;		-10: end of file
;		-40: record too big
;		-1:  other error
;
; note:
;	icr_gp_open or icr_gp_create must be called to open the file
;       before using icr_get. Either routine may be called as a
;	Fortran useropen routine.
;
eof=-10					; end of file
rtb=-40					; record too big
err=-1					; other error
unit=4					; offset from ap for unit address
buf=8					; offset from ap for buf address
siz=12					; offset from ap for size of buf
len=16					; offset from ap for length
blknum=20				; number of first block to read
;
bget::
	.word	^m<r2>
	movl	@unit(ap),r2		; get unit
	movl	rabs[r2],r2		; get rab address for this unit
	$rab_store -
		rab=r2, -
		ubf=@buf(ap), -
		usz=@siz(ap), -
		bkt=@blknum(ap)
	$read	rab=r2
	blbc	r0,error2		; low bit clear => error
	movzwl	rab$w_rsz(r2),@len(ap)	; number of bytes in record returned
	ret
error2:
	cmpl	r0,#rms$_eof		; EOF?
	beql	10$
	cmpl	r0,#rms$_rtb		; record too big?
	beql	20$
	cmpl	r0,#rms$_tns		; terminator not seen?
	beql	20$
	movl	#err,@len(ap)
	ret
10$:
	movl	#eof,@len(ap)
	ret
20$:
	movl	#rtb,@len(ap)
	ret

;
; Function to write blocks to an RMS file.
;
;	status = bput(unit, buffer, size, stat, blknum)
;
; inputs:
;	unit is the unit number
;	buffer is a byte buffer containing the data to be written
;	size is the size of the buffer
;	blknum is the number of the block to begin writing at
;
; outputs:
;	status - standard VAX/VMS status code
;	stat - zero if successful status, else -1
;
; note:
;	icr_gp_open or icr_gp_create must be called to open the file
;       before using icr_put. Either routine may be called as a
;	Fortran useropen routine.
;
err=-1
unit=4					; offset from ap for unit address
buf=8					; offset from ap for buf address
siz=12					; offset from ap for size of buf
stat=16					; offset from ap for status return
blknum=20				; number of first block to write
;
bput::
	.word	^m<r2>
	movl	@unit(ap),r2		; get unit
	movl	rabs[r2],r2		; get rab address for this unit
	$rab_store -
		rab=r2, -
		rbf=@buf(ap), -
		rsz=@siz(ap), -
		bkt=@blknum(ap)
	bicl2	#rab$m_tpt,rab$l_rop(r2) ; disable truncate on write
	$write	rab=r2
	blbc	r0,error3		; low bit clear => error3
	clrl	@stat(ap)		; successful status
	ret
error3:
	movl	#err,@stat(ap)
	ret
	.end
