#	Zilch Screen Editor, Copyright (c) 1982,1986 William P. Wood, Jr.

 define(DEBUG)
define(header,implicit integer (a-p,r-z); implicit logical (q)
  include "memory.cmn"
  include "screen.cmn"
  include "session.cmn")
define(RS_WI_BOW,1)
define(RS_WI_DOT,2)
define(RS_WI_SIZE,3)
define(RS_WI_MIN_SIZE,3)
define(RS_IS_PA_CURRENT_WINDOW,4)
define(RS_PA_NUMBER,5)
define(RS_IS_SE_CURRENT_PAGE,6)
define(RS_SC_SIZE,7)
define(RS_SC_WIDTH,8)
define(RS_IS_FILE,9)
define(RS_BU_INDENT,10)
define(RS_BU_MARK1,11)
define(RS_BU_MARK2,12)
define(RS_BU_SAVE_DOT,13)
define(RS_BU_SAVE_BOW,14)
define(RS_BU_CASE,15)
define(RS_BU_TYPE,16)
define(RS_SE_DEFAULT_CASE,17)
define(RS_SE_INDENT,17)
define(RS_FILE,18)
_set(RS_BUFFER_SIZE,max(MACRO_SIZE+MAX_MACROS,max(MAX_PROMPT,
			_arith(FILENAMESIZE,+,_arith(CHARS_PER_INT,*,_
			_arith(RS_FILE,-,1))))))

  program zilch
  header

_ifdef(DEBUG)
  call timrb
_enddef
  if (q_ed_initialize())
    repeat
      call ky_edit
      until (q_ed_finish())
_ifdef(DEBUG)
  call timre
_enddef
  end

  function q_ed_initialize
  header
  include "spfiles.cmn"
  logical ler
  string  illlen "Illegal screen length.",
	  illwid "Illegal screen width.",
	  illter "Illegal terminal type.",
	  illfil "Illegal file name.",
	  illcas 'Case must be "upper" or "lower".',
	  illind "Illegal indent.",
	  illword "Illegal word definition."

  q_ed_initialize = false
  call ti_initialize
  call sc_initialize
  cl_width = 0		# cl_width, the width returned from command line
  call te_initialize
  call se_initialize
  call pu_initialize
  call mp_initialize
  st = st_allocate(MAX_COMMAND)
  co = st_allocate(max(RS_BUFFER_SIZE,MAX_COMMAND))
  nfiles = 0
  if (q_co_get("File? ",st_buffer(co))) {
    while (q_co_parse(st_buffer(co), st_buffer(st), false)) {
      ler = false
      if (st_buffer(st) == '/') {
	if (nfiles > 0)
	  call co_error(EOS, 1, "Switches may not appear on file names.")
	else if (q_co_matswi(st_buffer(st), '/INItialize="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_init_file(st_buffer(st))
	else if (q_co_matswi(st_buffer(st), '/Length=#', ler, illlen, n)) {
	  sc_size = n
	  if (sc_size < 3 | sc_size > SCREEN_SIZE)
	    call co_error(EOS, 1, illlen)
	  }
	else if (q_co_matswi(st_buffer(st), '/Width=#', ler, illwid, n))
	  cl_width = n
	else if (q_co_matswi(st_buffer(st), '/Terminal="', ler,
			illter, n, st_buffer(st), MAX_COMMAND)) {
	  if (! q_te_set_type(st_buffer(st)))
	    call co_error(st_buffer(st), 1, illter)
	  }
	else if (q_co_matswi(st_buffer(st), '/Restore="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, se_restore)
	else if (q_co_matswi(st_buffer(st), '/Save="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, se_save)
	else if (q_co_matswi(st_buffer(st), '/Help="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, sp_help)
	else if (q_co_matswi(st_buffer(st), '/RATMAP="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, sp_ratmap)
	else if (q_co_matswi(st_buffer(st), '/PASMAP="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, sp_pasmap)
	else if (q_co_matswi(st_buffer(st), '/FORMAP="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, sp_formap)
	else if (q_co_matswi(st_buffer(st), '/TEXTMAP="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND))
	  call ed_save_string(st, sp_textmap)
	else if (q_co_matswi(st_buffer(st), '/CAse="', ler,
	  		illcas, n, st_buffer(st), MAX_COMMAND)) {
	  if (q_ho_equal(st_buffer(st), "lower"))
	    se_default_case = 0
	  else if (q_ho_equal(st_buffer(st), "upper"))
	    se_default_case = 1
	  else
	    call co_error(st_buffer(st),1,illcas)
	  }
	else if (q_co_matswi(st_buffer(st), '/INDent=#', ler, illind, n))
	  se_indent = n
	else if (q_co_matswi(st_buffer(st), '/CRoss_lines', ler, EOS, n))
	  se_cross_lines = true
	else if (q_co_matswi(st_buffer(st), '/NOCRoss_lines', ler, EOS, n))
	  se_cross_lines = false
	else if (q_co_matswi(st_buffer(st), '/WOrd="', ler,
			illword, n, st_buffer(st), MAX_COMMAND)) {
	  if (! q_se_define_word_class(st_buffer(st), 2))
	    call co_error(EOS, 1, "Too many word class definitions.")
	  }
	else if (q_co_matswi(st_buffer(st), '/MAcros="', ler,
			illfil, n, st_buffer(st), MAX_COMMAND)) {
	  call ed_save_string(st, se_macros)
	  if (! q_ma_read_macros(st_buffer(st)))
	    call co_error(st_buffer(st), 1, "Can't open macro file.")
	  }
	else if (q_co_matswi(st_buffer(st), '/RECover', ler, EOS, n))
	  se_recover = true
	else if (! ler)
	  call co_error(st_buffer(st), 1, "Illegal switch.")
	}
      else {
	nfiles = nfiles+1
	call multi_visit_file(st_buffer(st),false,nfiles == 1)
	}
      }
    }
  if (se_macros == null) {
    call ho_scopy("sys$login:zilch.macros", 1, st_buffer(st), 1)
    call ed_save_string(st, se_macros)
    if (nfiles != 0)
      if (! q_ma_read_macros(st_buffer(st)))
	;
    }
  if (nfiles == 0)
    call ed_restore_session(st_buffer(co))
  else {
    se_current_window = se_windows
    call wi_equalize
    }
  if (cl_width != 0)
    sc_width = cl_width
  if (se_windows == null)
    if (nfiles > 0)
      call co_error(EOS, 1, "Bad file name.")
    else
      call co_error(EOS, 1, "No files on command line.")
  else if ((! q_te_set_length(sc_size)) | sc_size < 3)
    call co_error(EOS, 1, illlen)
  else if (! q_te_set_width(sc_width))
    call co_error(EOS, 1, illwid)
  else {
    q_ed_initialize = true
    call ky_bind_keys
    call redraw
    }
  call st_deallocate(st)
  call st_deallocate(co)
  return
  end

  function q_ed_finish
  header
  logical aborted

  q_ed_finish = true
  if (bu_modified(se_current_buffer) == 1)
    if (q_pr_ask("Save file [y]? ",true,aborted)) {
      if (! q_fi_write_buffer(se_current_buffer))
	return(false)
      }
    else if (aborted)
      return(false)
  bu_map(se_buffers,bu)
    if (bu != se_current_buffer & bu_modified(bu) == 1 &
	bu_file_name(bu) != null) {
      if (! q_pr_ask("Modified files exist; exit [n]? ",false,aborted))
	q_ed_finish = false
      break
      }
  if (q_ed_finish) {
    call ed_save_session
    call ms_message(EOS)
    call sc_update(0)
    call te_finish
    call te_pos(sc_size,1)
    call ti_flush
    call ti_finish
    call dcl_finish
    }
  return
  end

  subroutine ed_restore_session(buf)
  header
  integer buf(ARB)

  if (se_restore != null)
    if (! q_fi_open_read(FIND_UNIT, st_buffer(se_restore), ebk, pro))
      call co_error(st_buffer(se_restore),1,
      					"Can't open session restore file.")
    else {
      sc_size = SCREEN_SIZE
      oldsiz = SCREEN_SIZE
      if (get(FIND_UNIT, buf, RS_BUFFER_SIZE, nc))	# restore macros
	call ma_restore_macros(buf, nc)
      if (get(FIND_UNIT, buf, RS_BUFFER_SIZE, nc)) {	# restore search string
	se_search_length = nc
	if (se_search_length > 0)
	  call movc(buf,st_buffer(se_search_string),se_search_length)
	}
      np = 0
      while (get(FIND_UNIT, buf, RS_BUFFER_SIZE, nc)) {	# restore windows
	if (buf(RS_PA_NUMBER) != np) {
	  np = buf(RS_PA_NUMBER)
	  pa = pa_new(np)
	  call pa_switch(np)
	  }
	if (buf(RS_IS_FILE) != 0)		# was a file?
	  call q_visit_file(buf(RS_FILE),false,1)
	else
	  call q_pop_to_buffer(buf(RS_FILE))
	}
      rewind (unit = FIND_UNIT, err = 20)
      call get(FIND_UNIT, buf, RS_BUFFER_SIZE, nc)
      call get(FIND_UNIT, buf, RS_BUFFER_SIZE, nc)
      pa_map(se_pages,pa)
	wi_map(pa_windows(pa),wi) {
	  if (get(FIND_UNIT, buf, RS_BUFFER_SIZE, nc)) {
	    bu = wi_buffer(wi)
	    bu_mark1(bu) = buf(RS_BU_MARK1)
	    bu_mark2(bu) = buf(RS_BU_MARK2)
	    bu_save_dot(bu) = buf(RS_BU_SAVE_DOT)
	    bu_save_bow(bu) = buf(RS_BU_SAVE_BOW)
	    bu_case(bu) = buf(RS_BU_CASE)
	    bu_type(bu) = buf(RS_BU_TYPE)
	    call mp_set_mappings(bu,bu_type(bu))
	    bu_indent(bu) = buf(RS_BU_INDENT)
	    bu_bow(bu) = buf(RS_WI_BOW)
	    bu_dot(bu) = buf(RS_WI_DOT)
	    wi_bow(wi) = buf(RS_WI_BOW)
	    wi_dot(wi) = buf(RS_WI_DOT)
	    wi_size(wi) = buf(RS_WI_SIZE) & 16%ffff
	    wi_min_size(wi) = max(1,buf(RS_WI_MIN_SIZE)/16%10000)
	    if (buf(RS_IS_PA_CURRENT_WINDOW) == 1)
	      pa_current_window(pa) = wi
	    if (buf(RS_IS_SE_CURRENT_PAGE) == 1)
	      se_current_page = pa
	    if (buf(RS_IS_PA_CURRENT_WINDOW) == 1 &
		buf(RS_IS_SE_CURRENT_PAGE) == 1)
	      se_current_window = wi
	    sc_size = buf(RS_SC_SIZE)
	    sc_width = buf(RS_SC_WIDTH)
	    se_default_case = buf(RS_SE_DEFAULT_CASE) & 1
	    se_indent = buf(RS_SE_INDENT)/2
	    if (se_indent == 0)
	      se_indent = 2
	    }
	  }
      if (oldsiz != sc_size) {			# retreive the message line!
	call sc_fill_line(sc_size,sc_buffer(1,oldsiz,sc_new),
						  sc_new_length(oldsiz))
	sc_reverse_video(sc_size,sc_new) = false
	}
      close(unit = FIND_UNIT, err = 10)
      }
  return
10
  call co_error(EOS,1,"Error closing session restore file.")
  return
20
  call co_error(EOS,1,"Error rewinding session restore file.")
  return
  end

  subroutine ed_save_session
  header

  if (se_save != null) {
    st = st_allocate(RS_BUFFER_SIZE)
    call ed_save_sess(st_buffer(st))
    call st_deallocate(st)
    }
  return
  end

  subroutine ed_save_sess(buf)
  header
  integer buf(ARB)
  string opener "Can't open session save file!@r@l"
  string closer "Error closing session save file!@r@l"

  if (! q_fi_open_write(WRITE_UNIT, st_buffer(se_save), 'U', 16%7F00))
    call ms_error(opener)
  else {
    call ma_save_macros(buf, nc, RS_BUFFER_SIZE)
    call put(WRITE_UNIT,buf,nc,ier)
    call put(WRITE_UNIT,st_buffer(se_search_string),se_search_length,ier)
    pa_current_window(se_current_page) = se_current_window
    pa_map(se_pages,pa)
      if (pa_number(pa) >= 0)
	wi_map (pa_windows(pa),wi) {
	  buf(RS_WI_BOW) = wi_bow(wi)
	  buf(RS_WI_DOT) = wi_dot(wi)
	  buf(RS_WI_SIZE) = wi_size(wi)
	  buf(RS_WI_MIN_SIZE) = buf(RS_WI_SIZE) | (16%10000*wi_min_size(wi))
	  if (wi == pa_current_window(pa))
	    buf(RS_IS_PA_CURRENT_WINDOW) = 1
	  else
	    buf(RS_IS_PA_CURRENT_WINDOW) = 0
	  buf(RS_PA_NUMBER) = pa_number(pa)
	  if (pa == se_current_page)
	    buf(RS_IS_SE_CURRENT_PAGE) = 1
	  else
	    buf(RS_IS_SE_CURRENT_PAGE) = 0
	  buf(RS_SC_SIZE) = sc_size
	  buf(RS_SC_WIDTH) = sc_width
	  buf(RS_SE_DEFAULT_CASE) = se_default_case | (se_indent*2)
	  bu = wi_buffer(wi)
	  buf(RS_BU_INDENT) = bu_indent(bu)
	  buf(RS_BU_MARK1) = bu_mark1(bu)
	  buf(RS_BU_MARK2) = bu_mark2(bu)
	  buf(RS_BU_SAVE_DOT) = bu_save_dot(bu)
	  buf(RS_BU_SAVE_BOW) = bu_save_bow(bu)
	  buf(RS_BU_CASE) = bu_case(bu)
	  buf(RS_BU_TYPE) = bu_type(bu)
	  if (bu_file_name(bu) == null) {
	    buf(RS_IS_FILE) = 0
	    call ho_scopy(st_buffer(bu_name(bu)),1,buf(RS_FILE),1)
	    }
	  else {
	    buf(RS_IS_FILE) = 1
	    call ho_scopy(st_buffer(bu_file_name(bu)),1,buf(RS_FILE),1)
	    }
	  call put(WRITE_UNIT, buf, ho_length(buf(RS_FILE)) + 1 +
				    CHARS_PER_INT*(RS_FILE - 1), ier)
	  }
    close(unit = WRITE_UNIT, err = 10)
    }
  return
10
  call ms_error(closer)
  return
  end

  subroutine ed_init_file(file)
  header
  byte file(ARB)
  include "pushb.cmn"

  if (q_fi_open_read(READ_UNIT, file, ebk, pro)) {
    while (get(READ_UNIT, file, MAX_COMMAND, nc))
      for (i = 1; i <=nc; i = i+1)
	call tx_insert_character(pu_buffer, file(i), bu_size(pu_buffer) + 1)
    close(unit = READ_UNIT, err = 10)
    }
  else
    call co_error(EOS, 1, "Can't read initialization file.")
  return
10
  call co_error(EOS, 1, "Error closing initialization file.")
  return
  end

  subroutine ed_save_string(s1, s2)
  header

  call st_deallocate(s2)
  s2 = st_allocate(st_length(s1) + 1)
  call st_scopy(s1, s2)
  return
  end
