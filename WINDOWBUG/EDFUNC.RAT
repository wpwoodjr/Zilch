#	Zilch Screen Editor, Copyright (c) 1982,1983,1984 William P. Wood, Jr.

define(header,implicit integer (a-p,r-z); implicit logical (q)
include "session.cmn"
include "memory.cmn")

  subroutine next_character
  header

  wi_dot(se_current_window) = min(wi_dot(se_current_window)+1,
				bu_size(se_current_buffer)+1)
  return
  end

  subroutine previous_character
  header

  wi_dot(se_current_window) = max(wi_dot(se_current_window)-1,1)
  return
  end

  subroutine forward_eight_characters
  header

  t = wi_dot(se_current_window)
  call end_of_line
  if (wi_dot(se_current_window) - t > 8)
    wi_dot(se_current_window) = t + 8
  return
  end

  subroutine backward_eight_characters
  header

  t = wi_dot(se_current_window)
  call beginning_of_line
  if (t - wi_dot(se_current_window) > 8)
    wi_dot(se_current_window) = t - 8
  return
  end

  subroutine next_line
  header

  bu = se_current_buffer
  wi_dot(se_current_window) = min(find_eol(bu,wi_dot(se_current_window)),
    							bu_size(bu))+1
  return
  end

  subroutine scroll_next_line
  header

  call next_line
  if (! q_dot_is_visible())
    call scroll_one_line_up
  return
  end

  subroutine scroll_next_line_col(hug)
  header

  if (hug == 0)
    hug = current_column()
  call scroll_next_line
  call goto_column(hug)
  return
  end

  subroutine previous_line
  header

  bu = se_current_buffer
  wi_dot(se_current_window) =
		find_bol(bu,max(1,find_bol(bu,wi_dot(se_current_window)) - 1))
  return
  end

  subroutine scroll_previous_line
  header

  call previous_line
  if (! q_dot_is_visible())
    call scroll_one_line_down
  return
  end

  subroutine scroll_previous_line_col(hug)
  header

  if (hug == 0)
    hug = current_column()
  call scroll_previous_line
  call goto_column(hug)
  return
  end

  subroutine scroll_one_line_up
  header

  t = wi_dot(se_current_window)
  wi_dot(se_current_window) = wi_bow(se_current_window)
  call next_line
  wi_set_bow(se_current_window,find_bol(se_current_buffer,
						wi_dot(se_current_window)))
  wi_dot(se_current_window) = t
  return
  end

  subroutine scroll_one_line_down
  header

  t = wi_dot(se_current_window)
  wi_dot(se_current_window) = wi_bow(se_current_window)
  call previous_line
  wi_set_bow(se_current_window,wi_dot(se_current_window))
  wi_dot(se_current_window) = t
  return
  end

  subroutine next_half_screen
  header

  n = (wi_size(se_current_window) + 1)/2
  do i = 1, n
    call next_line
  if (! q_dot_is_visible()) {
    dot = wi_dot(se_current_window)
    wi_dot(se_current_window) = wi_bow(se_current_window)
    do i = 1, n
      call next_line
    call line_to_top_of_window
    wi_dot(se_current_window) = dot
    }
  return
  end

  subroutine backup_lines(n)
  header

  do i = 1, n
    call previous_line
  if (! q_dot_is_visible()) {
    dot = wi_dot(se_current_window)
    wi_dot(se_current_window) = wi_bow(se_current_window)
    do i = 1, n
      call previous_line
    call line_to_top_of_window
    wi_dot(se_current_window) = dot
    }
  return
  end

  subroutine previous_half_screen
  header

  call backup_lines((wi_size(se_current_window) + 1)/2)
  return
  end

  subroutine previous_screen
  header

  call backup_lines(wi_size(se_current_window)-1)
  return
  end

  subroutine next_screen
  header

  t = wi_dot(se_current_window)
  call beginning_of_line
  if (wi_dot(se_current_window) == wi_bow(se_current_window))
    for (i = 1; i < wi_size(se_current_window); i = i+1)
      call next_line
  else
    wi_dot(se_current_window) = t
  call line_to_top_of_window
  return
  end

  function find_bol(bu,loc)
  header

  for (tx = min(loc-1,bu_size(bu)); tx > 0; tx = tx-1)
    if (tx_text(tx_address(bu,tx)) == NEWLINE)
      break
  return(tx+1)
  end

  subroutine beginning_of_line
  header

  wi_dot(se_current_window) =
  			find_bol(se_current_buffer,wi_dot(se_current_window))
  return
  end

  function find_eol(bu,loc)
  header

  tx = bu_base(bu) + loc
  call tx_find_newline(tx,bu_gap(bu),bu_gap_size(bu),tx_text)
  return(tx-1-bu_base(bu))
  end

  subroutine end_of_line
  header

  wi_dot(se_current_window) =
  			find_eol(se_current_buffer,wi_dot(se_current_window))
  return
  end

  subroutine ends_of_line
  header

  if (q_bol())
    call end_of_line
  else
    call beginning_of_line
  return
  end

  subroutine line_to_top_of_window
  header

  dot = wi_dot(se_current_window)
  call beginning_of_line
  wi_set_bow(se_current_window,wi_dot(se_current_window))
  wi_dot(se_current_window) = dot
  return
  end

  function q_bol
  header

  if (wi_dot(se_current_window) == 1)
    return(true)
  if (tx_text(tx_address(se_current_buffer,
			  wi_dot(se_current_window)-1)) == NEWLINE)
    return(true)
  return(false)
  end

  function q_eol
  header

  if (wi_dot(se_current_window) > bu_size(se_current_buffer))
    return(true)
  if (tx_text(tx_address(se_current_buffer,
			  wi_dot(se_current_window))) == NEWLINE)
    return(true)
  return(false)
  end

  subroutine beginning_of_file
  header

  wi_dot(se_current_window) = 1
  call line_to_top_of_window
  return
  end

  subroutine goto_last_lines_of_file
  header

  call end_of_file
  call previous_character
  call beginning_of_line
  for (i = 1; i < wi_size(se_current_window); i = i+1)
    call previous_line
  call line_to_top_of_window
  return
  end

  subroutine goto_end_of_file
  header

  call end_of_file
  for (i = 1; i < wi_size(se_current_window); i = i+1)
    call previous_line
  call line_to_top_of_window
  call end_of_file
  return
  end

  subroutine end_of_file
  header

  wi_dot(se_current_window) = bu_size(se_current_buffer) + 1
  return
  end

  subroutine insert_character(c)
  header
  byte c

  wi_dot(se_current_window) = wi_dot(se_current_window) + 1 # make it inc dot
  call tx_insert_character(se_current_buffer, c, wi_dot(se_current_window) - 1)
  wi_dot(se_current_window) = wi_dot(se_current_window) - 1 # end fake-out
  return
  end

  subroutine insert_string(buf)
  header
  byte buf(ARB)

  len = ho_length(buf)
  wi_dot(se_current_window) = wi_dot(se_current_window) + 1 # make it inc dot
  call tx_insert_buffer(se_current_buffer, wi_dot(se_current_window) - 1,
								      buf, len)
  wi_dot(se_current_window) = wi_dot(se_current_window) - 1 # end fake-out
  return
  end

  subroutine delete_previous_character
  header

  if (wi_dot(se_current_window) > 1)
    call tx_delete(se_current_buffer,wi_dot(se_current_window)-1,
		wi_dot(se_current_window)-1)
  return
  end

  subroutine delete_next_character
  header

  if (wi_dot(se_current_window) <= bu_size(se_current_buffer))
    call tx_delete(se_current_buffer,wi_dot(se_current_window),
		wi_dot(se_current_window))
  return
  end

  subroutine kill_to_beginning_of_line
  header

  t = wi_dot(se_current_window)
  call beginning_of_line
  call delete_region_to_buffer("kill",t,wi_dot(se_current_window))
  return
  end

  subroutine kill_through_end_of_line
  header

  t = wi_dot(se_current_window)
  if (t > bu_size(se_current_buffer))
    call ms_error("You're at the end of the buffer.")
  else {
    call end_of_line
    call delete_region_to_buffer("kill",t,
		min(wi_dot(se_current_window)+1, bu_size(se_current_buffer)+1))
    }
  return
  end

  subroutine kill_to_end_of_line
  header

  t = wi_dot(se_current_window)
  if (t > bu_size(se_current_buffer))
    call ms_error("You're at the end of the buffer.")
  else {
    call end_of_line
    call delete_region_to_buffer("kill",t,wi_dot(se_current_window))
    }
  return
  end

  subroutine yank_kill
  header

  t = wi_dot(se_current_window)
  call yank_buffer("kill")
  wi_dot(se_current_window) = t
  return
  end

  function q_dot_is_visible
  header

  return(q_sc_dot_is_visible(se_current_window,se_current_buffer))
  end

# this subroutine relies on the extra NEWLINES hidden at the end of each buffer
  byte function find_next_character
  header

  return(tx_text(tx_address(se_current_buffer,wi_dot(se_current_window))))
  end
